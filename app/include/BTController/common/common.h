#ifndef __COMMON_H__
#define __COMMON_H__

#include "common/type.h"
#include "controller/BTCmd.h"
#include <QStringList>
#include <QVector>

typedef UINT16	BT_PARAM_LEN;
typedef UINT32	BT_AT_CMD;
typedef UINT32	AT_CMD_LEN;

typedef UINT8	BT_DISC_ID;
typedef UINT8	BT_PAIRED_ID;
typedef UINT8	BT_REMOTE_ID;

//[20121127, TROY] #define CALL_HISTORY_SHM

#define MAX_RETRY_COUNT				2
//[20121128, TROY] #define MAX_LOCAL_CONTACTS			10
#define _FOR_VR_PERFORMANCE_

#define MAX_COMMAND_LENGTH			16

#define MAX_PACKET_LENGTH			2048
#define MAX_PARAM_LENGTH			2048
#define MAX_EVENT_PARAM_LENGTH		2048

#define MAX_EVENT_DATA_LENGTH		1536

#define MAX_SPP_PACKET_LENGTH		1024
#define MAX_FIRMWARE_DATA_SIZE		1028

#define MAX_DEVICE_NAME_LENGTH		80
#define BD_ADDRESS_LENGTH			12
#define MAX_PINCODE_LENGTH			16
#define NUMERIC_CODE_LENGTH			6
#define DH_PINCODE_LENGTH			4

#define PRODUCTOR_ID_LEN			20
#define MODEL_ID_LEN				20
#define HW_VERSION_LEN				20
#define LGIT_SW_VERSION_LEN			100
#define LGE_SW_VERSION_LEN			100
#define MAX_CALL_NUM_LEN			32
#define MAX_CALL_HISTORY_NUM		50
#define MAX_CONTACT_NUM				5000
#define TEMP_CONTACT_END_INDEX		8000
#define MAX_NETWORK_OP_NAME_LEN		80

#define COD_LEN						6

#define MAX_MANUFACTURE_ID			32
#define MAX_MODEL_ID				32
#define MAX_REVISION_ID				32

#define PB_FIRST_NAME_LEN			80
#define PB_MIDDLE_NAME_LEN			80
#define PB_LAST_NAME_LEN			80
#define PB_FORMAT_NAME_LEN			240
#define PB_MOBILE_NUM_LEN			25
#define PB_TIME_STAMP_LEN			20
#define PB_IMAGE_DATA_LENGTH		200

#define AUDIO_INFO_DATA_LENGTH			100

#define MSG_SUBJECT_LEN				50
#define MSG_SENDER_LEN				50
#define MSG_SENDER_FORMAT_LEN		50
#define MSG_PHONE_NUM_LEN			25
#define MSG_LEN						150
#define MSG_TIME_STAMP_LENGTH		20
#define MSG_FOLDER_LENGTH			50

#define MAX_PAIRED_DEVICE_COUNT		6
#define MAX_BT_DISCOVERY_ID 		30
#define MAX_BT_REMOTED_ID	 		30

#define IBOX_CONTACT_NAME_LEN		255
#define IBOX_MOBILE_NUM_LEN			40

#define MAX_MIC_VOLUME				5

#define INVALID_VALUE				-1

#define DIAGNOSTIC_TIMER			2

#define ECNR_CHECKSUM_LEN           6
#define ECNR_DATE_LEN               8
#define ECNR_PARAMETER_UNIT_SIZE    1024

const QString gBtControllerLogName("BtController");

//[20121128, TROY] no use
#if 0
typedef enum{
	BT_STATUS_DISCONNECTED,
	BT_STATUS_CONNECTED,
	BT_STATUS_INCOMING,
	BT_STATUS_TRY_OUTGOING,
	BT_STATUS_OUTGOING,	
	BT_STATUS_LINEBUSY
} BT_CALL_STATUS;

typedef enum{
	BT_3WAY_STATUS_NOT_ACTIVATED,
	BT_3WAY_STATUS_ACTIVE,
	BT_3WAY_STATUS_HELD,
	BT_3WAY_STATUS_DIALING,
//	BT_3WAY_STATUS_ALTERING,
//	BT_3WAY_STATUS_INCOMING,
	BT_3WAY_STATUS_WAITING,
} BT_3WAY_CALL_STATUS;
#endif

typedef enum{
	PAIRED_ID,
	DISCOVERED_ID,
	REMOTE_ID
} BT_ID_TYPE;

typedef enum {
	APP_REQ_BT_ENABLE,						// 0
	APP_REQ_FACTORY_RESET,					// 1
	APP_REQ_SOFT_RESET,						// 2
	APP_REQ_SET_UART_BAUDRATE,				// 3
	APP_REQ_GET_UART_BAUDRATE,				// 4
	APP_REQ_GET_MODULE_INFORMATION,			// 5
	APP_REQ_SET_LOCAL_DEVICE_NAME,	 		// 6
	APP_REQ_GET_LOCAL_DEVICE_NAME,			// 7
	APP_REQ_SET_LOCAL_BT_ADDRESS,			// 8
	APP_REQ_GET_LOCAL_BT_ADDRESS,			// 9
	APP_REQ_GET_BT_RSSI,					// 10
	APP_REQ_GET_BT_FUNCTION_STATE,			// 11
	APP_REQ_GET_BT_MODULE_CONFIG,			// 12
	APP_REQ_SET_CONNECTABLE_MODE,			// 13
	APP_REQ_GET_CONNECTABLE_MODE,			// 14
	APP_REQ_SET_DISCOVERABLE_MODE,			// 15
	APP_REQ_GET_DISCOVERABLE_MODE,			// 16
	APP_REQ_BT_DEVICE_INQUIRY,				// 17
	APP_REQ_SET_LEGACY_PAIRING_MODE,		// 18
	APP_REQ_GET_LEGACY_PAIRING_MODE,		// 19
	APP_REQ_PAIRING_REQUEST,				// 20
	APP_REQ_LEGACY_PAIRING_RESPONSE,		// 21
	APP_REQ_SET_SSP_PAIRING_MODE,			// 22
	APP_REQ_GET_SSP_PAIRING_MODE,			// 23
	APP_REQ_SSP_PAIRING_RESPONSE,			// 24
	APP_REQ_GET_PAIRED_DEVICE_COUNT,		// 25
	APP_REQ_GET_ALL_PAIRED_LIST,			// 26
	APP_REQ_GET_PAIRED_DEVICE_INFO,			// 27
	APP_REQ_DELETE_ALL_PAIRED_DEVICE,		// 28
	APP_REQ_DELETE_PAIRED_DEVICE,			// 29
	APP_REQ_SERVICE_DISCOVERY,				// 30
	APP_REQ_SERVICE_CONNECT_REQUEST,		// 31
	APP_REQ_SERVICE_CONNECT_RESPONSE,		// 32
	APP_REQ_SET_AUTO_CONNECTION_MODE,		// 33
	APP_REQ_AUTO_CONNECTION_CONTROL,		// 34
	APP_REQ_GET_RETRIVE_SUPPORT_FEATURE,	// 35
	APP_REQ_DIAL_NUMBER,					// 36
	APP_REQ_MEMORY_DIAL,					// 37
	APP_REQ_LAST_DIALED_NUMBER,				// 38
	APP_REQ_ANSWER_CALL,					// 39
	APP_REQ_HANG_UP_CALL,					// 40
	APP_REQ_ENHANCED_CALL_CONTROL,			// 41
	APP_REQ_GET_CALL_LIST_NOTIFICATION,		// 42
	APP_REQ_GET_CALL_INDICATOR_CONTROL,		// 43
	APP_REQ_SET_CALL_WAITING_MODE,			// 44
	APP_REQ_GET_CALL_WAITING_MODE,			// 45
	APP_REQ_SET_CALL_LINE_IDENTIFICATION,	// 46
	APP_REQ_GET_CALL_LINE_IDENTIFICATION,	// 47
	APP_REQ_GET_NETWORK_OPERATOR,			// 48
	APP_REQ_SET_CALL_AUDIO_MODE,			// 49
	APP_REQ_GET_CALL_AUDIO_MODE,			// 50
	APP_REQ_SEND_DTMF_TONES,				// 51
	APP_REQ_SET_MIC_VOLUME_GAIN,			// 52
	APP_REQ_GET_MIC_VOLUME_GAIN,			// 53
	APP_REQ_SET_BTM_ECNR_CONTROL,			// 54
	APP_REQ_GET_BTM_ECNR_CONTROL,			// 55
	APP_REQ_SET_AG_ECNR_CONTROL, 			// 56
	APP_REQ_GET_AG_ECNR_CONTROL, 			// 57
	APP_REQ_GET_MANUFACTURER_ID,			// 58
	APP_REQ_GET_MODEL_ID,					// 59
	APP_REQ_GET_REVISION_ID,				// 60
	APP_REQ_GET_PHONEBOOK_SIZE,				// 61
	APP_REQ_GET_PHONEBOOK_SUPPORT, 			// 62
	APP_REQ_PHONEBOOK_DOWNLOAD, 			// 63
	APP_REQ_PHONEBOOK_DOWNLOAD_AT, 			// 64
	APP_REQ_PHONEBOOK_IMAGE_DOWNLOAD, 		// 65
	APP_REQ_PHONEBOOK_DOWNLOAD_ABORT, 		// 66
	APP_REQ_GET_PHONEBOOK_DOWNLOAD_STATUS,	// 67
	APP_REQ_AVRCP_OPERATION,				// 68
	APP_REQ_GET_AVRCP_CURRENT_PLAY_INFO,	// 69
	APP_REQ_SET_AVRCP_PLAYER_SETTING,		// 70
	APP_REQ_GET_AVRCP_PLAYER_SETTING, 		// 71
	APP_REQ_SET_MESSAGE_NOTIFICATION,		// 72
	APP_REQ_GET_MESSAGE,					// 73
	APP_REQ_SET_MESSAGE_STATUS,				// 74
	APP_REQ_MESSAGE_ABORT,					// 75
	APP_REQ_MESSAGE_INBOX_UPDATE,			// 76
	APP_REQ_MESSAGE_SET_FOLDER,				// 77
	APP_REQ_GET_MESSAGE_FOLDER_LISTING,		// 78
	APP_REQ_GET_MESSAGE_LIST,				// 79
	APP_REQ_SERIAL_PORT_TRANSFER_DATA,		// 80
	APP_REQ_SET_SERIAL_PORT_MODE,			// 81	
	APP_REQ_FIRMWARE_CHECK_UPDATE,			// 82
	APP_REQ_FIRMWARE_HANDSHAKE,				// 83
	APP_REQ_FIRMWARE_SEND_SIZE,				// 84
	APP_REQ_FIRMWARE_DATA_UPDATE,			// 85
	APP_REQ_DELETE_PAIRED_DEVICE_ADDRESS,	// 86
	APP_REQ_ECHO,							// 87
	APP_REQ_SET_TEST_MODE,					// 88
	APP_REQ_GET_TEST_MODE,					// 89
	APP_REQ_SET_IPOD_STATUS,				// 90
	APP_REQ_GET_IPOD_STATUS,				// 91
	APP_REQ_SET_BVRA_MODE,					// 92
	APP_REQ_SET_SIRI_EYES_FREE_MODE,		// 93
	APP_REQ_SET_HFP_FORD_MODE,				// 94
	APP_REQ_GET_HFP_FORD_MODE,				// 95
	APP_REQ_SET_AV_MUTE_MODE,				// 96
	APP_REQ_GET_AV_MUTE_MODE, 				// 97
	APP_REQ_DIAGNOSTIC_FOR_DTC,				// 98
	APP_REQ_DIAGNOSTIC_FOR_RESET,			// 99
	APP_REQ_DELETE_PAIRED_DEVICE_NEW,		// 100
    APP_REQ_GET_BACM_MODE,					// 101
    APP_REQ_ALIVE,                          // 102
    APP_REQ_GET_REMOTE_DEVICENAME,          // 103
    APP_REQ_GET_ECNR_VERSION,               // 104
    APP_REQ_SET_ECNR_VERSION,               // 105
    APP_REQ_SET_ECNR_PRAM,                  // 106
    APP_REQ_SET_ECNR_SIZE,                  // 107
//#ifdef __PROJECTION__
    //projection
    APP_REQ_SSPOOB_PAIRING_REQUEST,         // 108
    APP_REQ_SET_AAP_MODE,                   // 109
    APP_REQ_GET_AAP_MODE,                   // 110
    APP_REQ_SET_FPM_FORD_MODE,              // 111
    APP_REQ_GET_FPM_FORD_MODE,              // 112
//#endif
    APP_REQ_MAX_ID
}APP_REQUEST_ID;

typedef enum {
	APP_RS_SET_ERROR_CODE,					// 0
	APP_RS_DEVICE_ENABLE,					// 1
	APP_RS_DEVICE_READY,					// 2
	APP_RS_DEVICE_RESET,					// 3
	APP_RS_SET_TRANSPORT_CONFIG,			// 4
	APP_RS_GET_TRANSPORT_CONFIG,			// 5
	APP_RS_DEV_INFO,						// 6
	APP_RS_SET_LC_DEV_NAME, 				// 7
	APP_RS_GET_LC_DEV_NAME,	 				// 8
	APP_RS_SET_BD_ADDRESS,		 			// 9
	APP_RS_GET_BD_ADDRESS,	 				// 10
	APP_RS_GET_RSSI,						// 11
	APP_RS_GET_BT_STATUS,					// 12
	APP_RS_GET_BT_MODULE_CONFIG,			// 13
	APP_RS_SET_CONNECT_MODE,				// 14
	APP_RS_GET_CONNECT_MODE,				// 15
	APP_RS_SET_DISCOVERY_MODE,				// 16
	APP_RS_GET_DISCOVERY_MODE,				// 17
	APP_RS_START_DISCOVERY,					// 18
	APP_RS_STOP_DISCOVERY,					// 19
	APP_RS_DEVICE_DISCOVERY,				// 20
	APP_RS_DISCOVERY_DONE,					// 21
	APP_RS_NAME_DISCOVERY,					// 22
	APP_RS_NAME_DONE,						// 23
	APP_RS_GET_PAIRING_CONF,				// 24
	APP_RS_SET_PAIRING_CONF,				// 25
	APP_RS_GET_SSP_CONF,					// 26
	APP_RS_SET_SSP_CONF,					// 27
	APP_RS_INIT_PAIRING,					// 28
	APP_RS_INCOMING_LEGACY_PAIRING_REQ,		// 29
	APP_RS_INCOMING_SSP_REQ, 				// 30
	APP_RS_PAIRING_RESULT,					// 31
	APP_RS_ACCEPT_SSP,						// 32
	APP_RS_DELETE_PAIRED_DEV,				// 33
	APP_RS_GET_PAIRED_COUNT,				// 34
	APP_RS_GET_PAIRED_DEVINFO,				// 35
	APP_RS_GET_PAIRED_DEVINFO_DONE,			// 36
	APP_RS_CONNECT,							// 37
	APP_RS_CONNECT_DISCONNECT_REQ,			// 38
	APP_RS_CONNECT_ACCEPT,					// 39
	APP_RS_DISCONNECT,						// 40
	APP_RS_GET_PEER_SERVICES,				// 41
	APP_RS_GET_PEER_SERVICES_DONE,			// 42
	APP_RS_SET_AUTO_CONNECT,				// 43
	APP_RS_HFP_GET_PEER_INFO,				// 44
	APP_RS_HFP_DIAL,						// 45
	APP_RS_HFP_MEM_DIAL,					// 46
	APP_RS_HFP_LAST_DIAL,					// 47
	APP_RS_HFP_ACCEPT,						// 48
	APP_RS_HFP_HANGUP,						// 49
	APP_RS_HFP_ECC,							// 50
	APP_RS_HFP_GET_CUR_CALLINFO,			// 51
	APP_RS_HFP_SET_CALL_LIST_NOTIFY,		// 52
	APP_RS_HFP_GET_CALL_LIST_NOTIFY,		// 53
	APP_RS_HFP_GET_CIND_CONFIG,				// 54
	APP_RS_HFP_CIEV_BATTERY_LEVEL,			// 55
	APP_RS_HFP_CIEV_NET_SIGNAL_STRENGTH,	// 56
	APP_RS_HFP_CIEV_SERVICE_AVAILABILITY,	// 57
	APP_RS_HFP_CIEV_ROAMING_STATUS,			// 58
	APP_RS_HFP_CIEV_CALL_STATUS,			// 59
	APP_RS_HFP_CIEV_CALL_SETUP,				// 60
	APP_RS_HFP_CIEV_CALL_HELD_STATUS,		// 61
	APP_RS_HFP_RING_INDICATOR,				// 62
	APP_RS_HFP_INBAND_RING,					// 63
	APP_RS_HFP_GET_CALL_WAITING_MODE,		// 64
	APP_RS_HFP_SET_CALL_WAITING_MODE,		// 65
	APP_RS_HFP_CALL_WAITING_NUMBER,			// 66
	APP_RS_HFP_SET_CALL_LINE_IDENT,			// 67
	APP_RS_HFP_GET_CALL_LINE_IDENT,			// 68
	APP_RS_HFP_CALL_LINE_INFO,				// 69
	APP_RS_HFP_GET_NET_OP_INFO,				// 70
	APP_RS_HFP_SET_AUDIO_PATH,				// 71
	APP_RS_HFP_GET_AUDIO_PATH,				// 72
	APP_RS_HFP_TX_DTMF_CODE,				// 73
	APP_RS_HFP_SET_VOLUME,					// 74
	APP_RS_HFP_GET_VOLUME,					// 75
	APP_RS_HFP_SET_ECNRBTM_CONF,			// 76
	APP_RS_HFP_GET_ECNRBTM_CONF,			// 77
	APP_RS_HFP_SET_ECNRAG_CONF,				// 78
	APP_RS_HFP_GET_ECNRAG_CONF,				// 79
	APP_RS_PBAP_IS_SUPPORTED,				// 80
	APP_RS_PBAP_GET_CUR_SIZE,				// 81
	APP_RS_PBAP_DNLD_CONTACT,				// 82
	APP_RS_PBAP_RCVD_CONTACT,				// 83
	APP_RS_PBAP_CONT_DNLD_DONE,				// 84
	APP_RS_PBAP_DNLD_IMG,					// 85
	APP_RS_PBAP_RCVD_IMG,					// 86
	APP_RS_PBAP_IMG_DNLD_DONE,				// 87
	APP_RS_PBAP_ABORT,						// 88
	APP_RS_PBAP_GET_DNLD_STATUS,			// 89
	APP_RS_AV_SEND_PLAY,					// 90
	APP_RS_AV_SEND_STOP,					// 91
	APP_RS_AV_SEND_PAUSE,					// 92
	APP_RS_AV_SEND_RESUME,					// 93
	APP_RS_AV_SEND_FORWARD,					// 94
	APP_RS_AV_SEND_REWIND,					// 95
	APP_RS_AV_SEND_NEXT,					// 96
	APP_RS_AV_SEND_PREVIOUS,				// 97
	APP_RS_AV_GET_CUR_PLAY_INFO,			// 98
	APP_RS_AV_PLAY_STATUS_CHANGED,			// 99
	APP_RS_AV_SAMPLING_FREQ_CHANGED,		// 100
	APP_RS_AV_TRACK_CHANGED,				// 101
	APP_RS_AV_STREAMING_STARTED_IND,		// 102
	APP_RS_AV_STREAMING_SUSPENDED_IND,		// 103
	APP_RS_AV_STREAMING_STOPPED_IND,		// 104
	APP_RS_AV_STREAM_PLAYED_IND,			// 105
	APP_RS_AV_STREAM_PAUSED_IND,			// 106
	APP_RS_AV_POSITION_CHANGED_IND,			// 107
	APP_RS_AV_ERROR_IND,					// 108
	APP_RS_MAP_ENABLE_MSG_IND,				// 109
	APP_RS_MAP_MSG_IND,						// 110
	APP_RS_MAP_GET_MSG,						// 111
	APP_RS_MAP_SET_MSG_STATUS,				// 112
	APP_RS_MAP_MSG_ABORT,					// 113
	APP_RS_MAP_INBOX_UPDATE,				// 114
	APP_RS_MAP_SET_MSG_FLDR,				// 115
	APP_RS_MAP_GET_MSG_FLDR_LIST,			// 116
	APP_RS_MAP_GET_MSG_LIST,				// 117
	APP_RS_SPP_DATA_RECEIVED,				// 118
	APP_RS_HFP_AG_ERR_IND,					// 119
	APP_RS_HFP_GET_MANUFACT_ID,				// 120
	APP_RS_HFP_GET_MODEL_ID,				// 121
	APP_RS_HFP_GET_REVISION_ID,				// 122
	APP_RS_AV_GET_PLAYER_SETTING,			// 123
	APP_RS_AV_GET_CUR_PLAY_INFO_DONE,		// 124
	APP_RS_CMD_ACKED_OK,					// 125
	APP_RS_CMD_ACKED_ERROR,					// 126
	APP_RS_CMD_ERROR_IND,					// 127
	APP_RS_CONNECTION_RESULT,				// 128
	APP_RS_CONNECTION_RESULT_DONE,			// 129
	APP_RS_MAP_GET_MSG_LIST_DONE,			// 130
	APP_RS_AUTO_CONNECTION_RESULT,			// 131
	APP_RS_UPGRADE_ACKED_OK,				// 132
	APP_RS_UPGRADE_ACKED_ERROR,				// 133
	APP_RS_UPGRADE_HSRDY,					// 134
	APP_RS_UPGRADE_BIN_END,					// 135
	APP_RS_UPGRADE_START_ACKED_OK,			// 136
	APP_RS_UPGRADE_FW_SIZE_OK,				// 137
	APP_RS_UPGRADE_PROCESS_OK,				// 138
	APP_RS_UPGRADE_PROCESS_ERROR,			// 139
	APP_RS_UPGRADE_PROCESS_DONE,			// 140
	APP_RS_HFP_GET_CALL_LIST_NOTIFY_DONE,	// 141
	APP_RS_ECHO,							// 142
	APP_RS_SPP_TX_SUCCESS,					// 143
	APP_RS_SPP_TX_FAILURE,					// 144
	APP_RS_CONNECT_FAIL,					// 145
	APP_RS_GET_TESTCMD_MODE,				// 146
	APP_RS_CONNECTION_REQUEST_FAIL,			// 147
	APP_RS_GET_IPOD_STATUS, 				// 148
	APP_RS_GET_IPOD_STATUS_DONE,			// 149
	APP_RS_HFP_GET_BVRA_MODE,				// 150
	APP_RS_HFP_GET_SIRI_STATUS,				// 151
	APP_RS_HFP_SET_SIRI_EFM_DONE,			// 152
	APP_RS_SET_IPOD_STATUS_FAIL,			// 153
	APP_RS_HFP_SET_BVRA_MODE_FAIL,			// 154
	APP_RS_HFP_SET_SIRI_EFM_FAIL,			// 155
	APP_RS_PBAP_SIZE_REQ_FAIL,				// 156
	APP_RS_CONNECT_CANCLE_DONE,				// 157
	APP_RS_HFP_SET_BVRA_MODE_OK,			// 158
	APP_RS_HFP_GET_CALL_LIST_FAIL,			// 159
	APP_RS_GET_HFP_FORD_MODE,				// 160
	APP_RS_INCOMING_CONNECT_CANCLE_DONE,	// 161
	APP_RS_GET_AV_MUTE_MODE,				// 162
	APP_RS_AV_GET_CUR_PLAY_INFO_TIMEOUT,	// 163
	APP_RS_MODULE_CMD_TIMEOUT,				// 164
	APP_RS_GET_DTC_FAIL,					// 165
	APP_RS_GET_ECHO_FOR_RESET_FAIL, 		// 166
	APP_RS_DTC,								// 167
	APP_RS_GET_BACM_MODE,					// 168
    APP_RS_ALIVE,                           // 169
    APP_RS_ALIVE_FAIL,                      // 170
    APP_RS_GET_REMOTE_DEVICENAME,           // 171
    APP_RS_GET_REMOTE_DEVICENAME_FAIL,      // 172
    APP_RS_GET_ECNR_VERSION,                // 173
    APP_RS_SET_ECNR_PARAM_OK,               // 174
    APP_RS_SET_ECNR_VERSION_OK,             // 175
    APP_RS_SET_ECNR_SIZE_OK,                // 176
    APP_RS_SET_ECNR_SIZE_FAIL,              // 177
    APP_RS_SET_ECNR_PARAM_DONE,             // 178
    APP_RS_SET_ECNR_PARAM_FAIL,             // 179
//#ifdef __PROJECTION__
    //projection
    APP_RS_GET_AAP_MODE,                    // 180
    AAP_RS_GET_AAP_MODE_DONE,               // 181
    APP_RS_GET_FPM_FORD_MODE,               // 182
//#endif
	APP_RS_MAX_ID
}APP_RESPONSE_ID;

typedef enum {
	BT_UPGRADE_UPLOAD,
	BT_UPGRADE_HSRDY,
	BT_UPGRADE_SIZE,
	BT_UPGRADE_BIN,
	BT_UPGRADE_END,
} BT_UPGRADE;

typedef enum {
	BT_ERR_NO_ECA_MODE,
	BT_ERR_INVALID_COMMAND,				// 1001
	BT_ERR_SYNTAX_ERROR,				// 1002
	BT_ERR_INVALID_PARAM,				// 1003
	BT_ERR_INVALID_BT_STATUS,			// 1004
	BT_ERR_ALREADY_SERVICE_CONNECTED,	// 1005
	BT_ERR_WANTED_DEVICE_NOT_PAIRED,	// 1006
	BT_ERR_PBAP_NOT_SUPPORT,			// 1007
    BT_ERR_SPP_NOT_SUPPORT,             // 1008
    BT_ERR_OTHER_COMMAND_PROCESSING,	// 1009
	BT_ERR_PAIRED_LIST_FULL,			// 1010
	BT_ERR_WANTED_DEVICE_CONNECTED,		// 1011
	BT_ERR_WANTED_DEVICE_NOT_CONNECTED,	// 1012
	BT_ERR_INTERNAL_ERROR,				// 1013
	BT_ERR_BT_MODULE_STARTING,			// 1014
	BT_ERR_BT_MODULE_OFF,				// 1015
	BT_ERR_BT_MOUDLE_ON,				// 1016
	BT_ERR_UPDATE_HANDSHAKE_ERROR,		// 1100
	BT_ERR_UPDATE_CRC_ERROR,			// 1101
	BT_ERR_UPDATE_FLASH_WRITE_ERROR,	// 1102
	BT_ERR_UPDATE_FLASH_ERASE_ERROR,	// 1103
	BT_ERR_UPDATE_NUMBER_ERROR,			// 1104
	BT_ERR_UPDATE_SIZE_ERROR, 			// 1105
	BT_ERR_HFP_NOT_CONNECTED,			// 2001
	BT_ERR_SERVICE_NOT_SUPPORTED,		// 2002
	BT_ERR_HFP_STATE_ERROR,				// 2003
	BT_ERR_TOO_MANY_ONGOING_CALL,		// 2004
	BT_ERR_SAME_MODE_NOT_ALLOWED,		// 2005
	BT_ERR_HFP_RESPONSE_TIMEOUT,		// 2006
	BT_ERR_A2DP_NOT_CONNECTED,			// 3001
	BT_ERR_AVRCP_NOT_CONNECTED,			// 3002
	BT_ERR_AVRCP_NOT_SUPPPORT,			// 3003
	BT_ERR_A2DP_SBC_ERROR,				// 3004
	BT_ERR_AVRCP_COMMAND_TIMEOUT,		// 3005
	BT_ERR_AVRCP_AVOP_FAIL,				// 3006
	BT_ERR_AVRCP_AVPI_CHARET_ERROR,		// 3007
	BT_ERR_AVRCP_REMOTE_DEVICE_ERROR,	// 3008
	BT_ERR_PBAP_NOT_CONNECTED,			// 4001
	BT_ERR_PBAP_OBEX_ERROR,				// 4002
	BT_ERR_PBAP_REPOSITORY_NOT_SUPPORT,	// 4003
	BT_ERR_PBAP_CATEGORY_FAIL,			// 4004
	BT_ERR_PBAP_CHARSET_ERROR,			// 4005
	BT_ERR_PBAP_PARSING_FAIL,			// 4006
	BT_ERR_ATPBA_NOT_SUPPORT,			// 4007
	BT_ERR_PBAP_REQUEST_TIMEOUT,		// 4008
	BT_ERR_SPP_NOT_CONNECTED,			// 5001
	BT_ERR_SPP_TX_DATA_SIZE_WRONG,		// 5002
	BT_ERR_MAP_NOT_CONNECTED,			// 6001
	BT_ERR_MAP_OBEX_ERROR,				// 6002
	BT_ERR_UNKNOWN_ID,
#if 0
	/*Will contain BTM error codes from section 3.2 Error Results from
	the BTM Hardware interface specification */
	BT_ERR_INVALID_PARAM,
	BT_ERR_STACK_STARTING,
	BT_ERR_INTERNAL_ERROR,
	BT_ERR_CMD_DISALLOWED,
	BT_ERR_MEMORY_CAPACITY,
	BT_ERR_UNSPECIFIED,
	BT_ERR_INVALID_DEVICE_ID,
	BT_ERR_DEV_NOT_CONNECT,
	BT_ERR_INVALID_STATUS,
	BT_ERR_INVALID_PINCODE_SIZE,
	BT_ERR_INTERNAL_STATE_NOT_IDLE,
	BT_ERR_INVALID_PAIRED_ID,
	BT_ERR_HF_NOT_CONNECTED,
#endif
} BT_ERROR;

typedef enum {
	BT_CMER_AG_FAILURE,					// 0
	BT_CMER_NO_CONNECTION_PHONE,		// 1
	BT_CMER_OPERATION_NOT_ALLOWED,		// 3
	BT_CMER_OPERATION_NOT_SUPPORTED,	// 4
	BT_CMER_PH_SIM_PIN_REQUIRED,		// 5
	BT_CMER_PH_FSIM_PIN,				// 6
	BT_CMER_PH_FSIM_PUK,				// 7
	BT_CMER_SIM_NOT_INSERTED,			// 10
	BT_CMER_SIM_PIN_REQUIRED,			// 11
	BT_CMER_SIM_PUK_REQUIRED,			// 12
	BT_CMER_SIM_FAILURE,				// 13
	BT_CMER_SIM_BUSY,					// 14
	BT_CMER_SIM_WRONG,					// 15
	BT_CMER_INCORRECT_PASSWORD,			// 16
	BT_CMER_SIM_PIN2_REQUIRED,			// 17
	BT_CMER_PUK2_REQUIRED,				// 18
	BT_CMER_MEMORY_FULL,				// 20
	BT_CMER_INVALID_INDEX,				// 21
	BT_CMER_NOT_FOUND,					// 22
	BT_CMER_MEMORY_FAILURE,				// 23
	BT_CMER_TEXT_STRING_TOO_LONG,		// 24
	BT_CMER_INVALID_CHARACTERS_STRING,	// 25
	BT_CMER_DIAL_STRING_TOO_LONG,		// 26
	BT_CMER_INVALID_CHARACTERS_DIAL,	// 27
	BT_CMER_NO_NETWORK_SERVICE,			// 30
	BT_CMER_NETWORK_TIMEOUT,			// 31
	BT_CMER_NETWORK_EMERGENCY_CALL,		// 32
	BT_CMER_NETWORK_PER_PIN_REQUIRED,	// 40
	BT_CMER_NETWORK_PER_PUK_REQUIRED,	// 41
	BT_CMER_NETWORK_SUBSET_PER_PIN,		// 42
	BT_CMER_NETWORK_SUBSET_PER_PUK,		// 43
	BT_CMER_SERVICE_PER_PIN,			// 44
	BT_CMER_SERVICE_PER_PUK,			// 45
	BT_CMER_CORPORATE_PER_PIN,			// 46
	BT_CMER_CORPORATE_PER_PUK,			// 47
	BT_CMER_HIDDEN_KEY_REQUIRED,		// 48
	BT_CMER_EAP_METHOD_NOT_SUPPORTED,	// 49
	BT_CMER_INCORRECT_PARAMETERS,		// 50
	BT_CMER_UNKNOWN,					// 100
	BT_CMER_BUSY,						// 101
	BT_CMER_NO_CARRIER,					// 102
	BT_CMER_NO_ANSWER,					// 103
	BT_CMER_DELAYED,					// 104
	BT_CMER_BLACKLISTED,				// 105
	BT_CMER_SUCCESS,					// 0xFFFF
	BT_CMER_UNKNOWN_ID,
} BT_CMER_ERROR;

typedef enum {
	BT_SUCCESS,
	BT_FAILURE
} BT_RESULT;

typedef enum{
	BT_STATE_WAIT_FOR_ACK,
	BT_STATE_INVALID_COMMAND,
	BT_STATE_ACKED
} BT_STATE_RESULT;

typedef enum{
	BT_SVC_HFP,
	BT_SVC_A2DP,
	BT_SVC_AVRCP,
	BT_SVC_PBAP,
	BT_SVC_MAP,
	BT_SVC_SPP,
    BT_SVC_OPP,
    BT_SVC_PANDORA,
    BT_SVC_AHA,
	BT_SVC_DEFAULT,
	BT_SVC_ALL
} BT_SERVICE_NAME;

typedef enum {
	DISABLE_BLUETOOTH,
	ENABLE_BLUETOOTH
} BT_DEVICE_ENABLE;

/*According to the BTM, the only baudrates supported are:
  BAUD_115200,BAUD_230400,BAUD_460800,BAUD_921600.
  However, since the transport uses a high-speed UART, other baudrates are also
  included by defining UART_SPEED_EXTENSION.*/
//#define UART_SPEED_EXTENSION
typedef enum {
#ifdef UART_SPEED_EXTENSION
             BAUD_9600,
             BAUD_57600,
#endif/*UART_SPEED_EXTENSION*/
             BAUD_115200,
             BAUD_230400,
             BAUD_460800,
             BAUD_921600
#ifdef UART_SPEED_EXTENSION
	     ,
             BAUD_1041670,
             BAUD_2083330
#endif/*UART_SPEED_EXTENSION*/
} BT_TRANSPORT_CONFIG;

typedef enum {
	BT_GAP_STATE_NOT_READY,
	BT_GAP_STATE_READY,
	BT_GAP_STATE_INQUIRY,
	BT_GAP_STATE_PAIRING,
	BT_GAP_STATE_SDP,
	BT_GAP_STATE_SERVICE_CONNECTING,
	BT_GAP_STATE_SERVICE_CONNECTING_CANCEL,
	BT_GAP_STATE_SERVICE_DISCONNECTING,
	BT_GAP_STATE_SERVICE_AUTOCONNECTING,
	BT_GAP_STATE_SERVICE_AUTOCONNECTING_CANCEL,
	BT_GAP_STATE_SERVICE_CONNECT_RETRY,
	BT_GAP_STATE_SERVICE_CONNECT_LINK_LOSS,
	BT_GAP_STATE_SERVICE_CONNECTED,
	BT_GAP_STATE_UNKNOWN,	
} BT_GAP_STATE;

typedef enum {
	BT_HFP_STATE_NOT_READY,
	BT_HFP_STATE_READY,
	BT_HFP_STATE_SERVICE_CONNECTING,
	BT_HFP_STATE_SERVICE_DISCONNECTING,
	BT_HFP_STATE_SERVICE_AUTOCONNECTING,
	BT_HFP_STATE_SERVICE_CONNECTED,
	BT_HFP_STATE_INCOMING_CALL,
	BT_HFP_STATE_OUTGOING_CALL,
	BT_HFP_STATE_ONGOING_CALL,
	BT_HFP_STATE_3WAY_CALL
} BT_HFP_STATE;

typedef enum {
	BT_ATPBA_STATE_NOT_READY,
	BT_ATPBA_STATE_READY,
	BT_ATPBA_STATE_SERVICE_CONNECTED,
	BT_ATPBA_STATE_DATA_DOWNLOADING
} BT_ATPBA_STATE;

typedef enum {
	BT_A2DP_STATE_NOT_READY,
	BT_A2DP_STATE_READY,
	BT_A2DP_STATE_SERVICE_CONNECTING,
	BT_A2DP_STATE_SERVICE_DISCONNECTING,
	BT_A2DP_STATE_SERVICE_AUTOCONNECTING,
	BT_A2DP_STATE_SERVICE_CONNECTED,
	BT_A2DP_STATE_STREAMING,
	BT_A2DP_STATE_STREAM_SUSPEND
} BT_A2DP_STATE;

typedef enum {
	BT_AVRCP_STATE_NOT_READY,
	BT_AVRCP_STATE_READY,
	BT_AVRCP_STATE_SERVICE_CONNECTING,
	BT_AVRCP_STATE_SERVICE_DISCONNECTING,
	BT_AVRCP_STATE_SERVICE_CONNECTED,
	BT_AVRCP_STATE_GET_METADATA
} BT_AVRCP_STATE;

typedef enum {
	BT_PBAP_STATE_NOT_READY,
	BT_PBAP_STATE_READY,
	BT_PBAP_STATE_SERVICE_CONNECTING,
	BT_PBAP_STATE_SERVICE_DISCONNECTING,
	BT_PBAP_STATE_SERVICE_CONNECTED,
	BT_PBAP_STATE_DATA_DOWNLOADING
} BT_PBAP_STATE;

typedef enum {
	BT_MAP_STATE_NOT_READY,
	BT_MAP_STATE_READY,
	BT_MAP_STATE_SERVICE_CONNECTING,
	BT_MAP_STATE_SERVICE_DISCONNECTING,
	BT_MAP_STATE_SERVICE_CONNECTED,
	BT_MAP_STATE_GET_MESSAGE,
	BT_MAP_STATE_GET_FOLDER_LIST
} BT_MAP_STATE;

typedef enum {
	BT_SPP_STATE_NOT_READY,
	BT_SPP_STATE_READY,
	BT_SPP_STATE_SERVICE_CONNECTING,
	BT_SPP_STATE_SERVICE_DISCONNECTING,
	BT_SPP_STATE_SERVICE_CONNECTED
} BT_SPP_STATE;

typedef enum{
	PBAP_REQUEST_SUCCEEDED,
	PBAP_REQUEST_FAILED,
	PBAP_REQUEST_NOT_SUPPORTED,
} BT_PBAP_RESULT;

typedef enum {
	BT_ENABLE_CONNECT,
	BT_DISABLE_CONNECT
} BT_CONNECTABLE_MODE;

typedef enum {
	BT_ENABLE_DISCOVER,
	BT_DISABLE_DISCOVER
} BT_DISCOVERY_ENABLE;

typedef enum {
	BT_DONT_DISCONNECT,
	BT_DISCONNECT_ALL,
	BT_DISCONNECT_ONLY_HF,
	BT_DISCONNECT_ONLY_A2DP,
	BT_NOT_SPECIFIED//To be used when mode is not specified.
} BT_DISCONNECT_CRITERIA;

typedef enum {
	BT_START_DISCOVERY,
	BT_STOP_DISCOVERY
} BT_DISCOVERY_TRIGGER;

typedef enum {
	ALWAYS_REFUSE_INCOMING,
	ALWAYS_ACCEPT_INCOMING,
	FORWARD_INCOMING
} BT_PAIRING_MODE;

typedef enum {
	ALLOW_PAIRING,
	REFUSE_PAIRING,
	ALLOW_PAIRING_WITH_DEFAULT_PIN
} BT_LEGACY_PAIRING_RESPONSE;

typedef enum {
	ALLOW_SSP,
	REFUSE_SSP,
} BT_SSP_RESPONSE;

typedef enum {
    AUTO_CONNECT_MODE_STOP,
    AUTO_CONNECT_MODE_ACC_ON,
    AUTO_CONNECT_MODE_GENERAL
} BT_AUTO_CONNECT_MODE;

typedef enum{
	LEGACY,
	SSP
} BT_PAIRING_TYPE;

typedef enum {
	SERVICE_DISCOVERY_SUCCESS,
	SERVICE_DISCOVERY_FAILED,
	SERVICE_DISCOVERY_NO_DEVICE,
	SERVICE_DISCOVERY_UNKNOWN
} BT_SERVICE_DISC_RESULT;

typedef enum{
	DISPLAY_ONLY,
	DISPLAY_YES_NO,
	KEYBOARD_ONLY,
	NO_INPUT_NO_OUTPUT,
	NOT_SELECTED
} BT_SSP_AUTH;

typedef enum{
	ACCEPT_CONNECTION,
	REFUSE_CONNECTION
} BT_ACCEPT_AUTH;

typedef enum{
	SSP_DISABLE,
	SSP_ENABLE
} BT_SSP_STATE;

typedef enum{
	BT_NUMERIC_JUSTWORKS,
	BT_PASSKEY_INPUT,
	BT_PASSKEY_DISPLAY
} BT_SSP_IO_CAP;

typedef enum{
	BT_SERVICE_CONNECT = 0,
	BT_SERVICE_DISCONNECT = 1,
	BT_SERVICE_CONNECT_CANCEL = 2,
	BT_STATE_LINKLOSS_START = 3,
	BT_STATE_LINKLOSS_END = 4,
	BT_STATE_INCOMING_CONNECT_END = 5,
	BT_STATE_CONNECT_CANCEL_END = 6,
	BT_STATE_AUTO_CONNECT_START = 7,
	BT_STATE_AUTO_CONNECT_STOP = 8,
	BT_STATE_AUTO_CONNECT_END = 9,
	BT_STATE_INCOMING_CONNECT_CANCEL = 10
} BT_CONNECTION_MODE;

typedef enum{
	SUCCESS,
	FAILURE,
	LINK_LOSS
} BT_CONNECTION_RESULT_VALUE;

typedef enum{
	AVAILABLE,
	UNAVAILABLE
} BT_VALUE_AVAILABLE;

typedef enum{
	PAIRING_SUCCESS,
	PAIRING_FAILED,
	PAIRING_BAD_PIN,
	PAIRING_TIMEOUT,
	PAIRING_AD_DEVICE
} BT_PAIRING_RESULT_VALUE;

typedef enum {
	AVRCP_1_0,
	AVRCP_1_3,
	AVRCP_1_4
} AVRCP_VERSION_SUPPORT;

typedef enum {
	AUTO_CONNECT_DISABLE,
	AUTO_CONNECT_ENABLE_PREVIOUS,
	AUTO_CONNECT_ENABLE_SELECT,
	AUTO_CONNECT_ENABLE_PRIORITY,
	AUTO_CONNECT_ALL_MODE
} BT_ENABLE_AUTO_CONNECT;

typedef enum {
	UNKNOWN_TEST_MODE,
	UART_LOOPBACK_MODE,
	SSP_DEBUG_MODE,
    DUT_MODE,
    ADC_MODE
} BT_TEST_CMD_MODE;

typedef enum {
	DISABLE_TEST_MODE,
    ENABLE_TEST_MODE,
    ADC_MODE_A,
    ADC_MODE_B
} BT_TEST_MODE_ENABLE;

// Begin HFP
typedef enum {
	RELEASE_ALL_HELDANDWAITING,
	RELEASE_ALL_ACTIVE_ACCEPT_HELDORWAITING,
	ACCEPT_WAITINGANDHOLD_SWAP_ACTIVE,
	ADD_HELD_CALL,
	CONNECT_GUESTS_DISCONNECT_HOST,
	RELEASE_SELECTED_ACTIVE,//call_index value is valid
	HOLD_ALL_EXCEPT_SELECTED//call_index value is valid
} BT_ECC_ACTION;

typedef enum {
	INBAND_RING_NOT_SUPPORTED,
	INBAND_RING_SUPPORTED	
} BT_HFP_INBAND_RING_IND;

typedef enum{
	BT_HFP_CALL_ORIGINATED,
	BT_HFP_CALL_TERMINATED
} BT_HFP_CALL_DIRECTION;

typedef enum{
	BT_HFP_ACTIVE_CALL,
	BT_HFP_HELD_CALL,
	BT_HFP_DIALING_CALL,
	BT_HFP_ALERTING_CALL,
	BT_HFP_INCOMING_CALL,
	BT_HFP_WAITING_CALL
} BT_HFP_CALL_STATE;

typedef enum{
	BT_HFP_VOICE_CALL,
	BT_HFP_DATA_CALL,
	BT_HFP_FAX_CALL
} BT_HFP_CALL_MODE;

typedef enum{
	BT_HFP_NOT_MULTIPARTY_CALL,
	BT_HFP_MULTIPARTY_CALL,
} BT_HFP_CALL_MULTIPARTY;

typedef enum{
	BT_HFP_LOCAL_CALL,
	BT_HFP_UNKNOWN_TYPE,
	BT_HFP_INTERNATIONAL_CALL,
	BT_NOT_SELECTED
} BT_HFP_CALL_TYPE;

typedef enum{
	BT_HFP_NET_AUTOMATIC,
	BT_HFP_NET_MANUAL
} BT_HFP_NET_OP_MODE;

typedef enum{
	BT_HFP_NET_LONG_ALPHANUMERIC,
	BT_HFP_NET_SHORT_ALPHANUMERIC,
	BT_HFP_NET_NUMERIC,
	BT_HFP_FORMAT_NOT_SELECTED
} BT_HFP_NET_OP_FORMAT;

typedef enum{
	BT_HFP_NET_NOT_IN_CALL,
	BT_HFP_NET_IN_CALL_PROCESSING,
	BT_HFP_NET_OUT_CALL_PROCESSING,
	BT_HFP_NET_ALERTING_REMOTE_PARTY,
	BT_HFP_NET_OP_NOT_SELECTED
} BT_HFP_NET_OPERATOR;

typedef enum{
	ECNR_OFF,
	ECNR_ON
} BT_HFP_ECNR_MODE;

typedef enum{
	NETWORK_UNAVAILABLE,
	NETWORK_AVAILABLE	
} BT_HFP_CIND_SERVICE_AVAILABILITY;

typedef enum{
	NO_CALL_ACTIVE,
	CALL_ACTIVE
} BT_HFP_CIND_CALL_STATUS;

typedef enum{
	NO_IN_CALL_SETUP,
	PROCESSING_INCOMING_CALL,
	PROCESSING_OUTGOING_CALL,
	REMOTE_PARTY_ALERTED_OUTCALL
} BT_HFP_CIND_CALL_SETUP;

typedef enum{
	NO_CALLS_HELD,
	CALL_PLACED_OR_SWAPPED,
	CALL_ONHOLD_NO_ACTIVE_CALL
} BT_HFP_CIND_CALL_HELD_STATUS;

typedef enum{
	SIGNAL_STRENGTH_0,
	SIGNAL_STRENGTH_1,
	SIGNAL_STRENGTH_2,
	SIGNAL_STRENGTH_3,
	SIGNAL_STRENGTH_4,
	SIGNAL_STRENGTH_5
} BT_HFP_CIND_SIGNAL_STRENGTH;

typedef enum{
	ROAMING_NOT_ACTIVE,
	ROAMING_ACTIVE
} BT_HFP_CIND_ROAMING_STATUS;

typedef enum{
	BATTERY_CHARGE_0,
	BATTERY_CHARGE_1,
	BATTERY_CHARGE_2,
	BATTERY_CHARGE_3,
	BATTERY_CHARGE_4,
	BATTERY_CHARGE_5
} BT_HFP_CIND_BATTERY_CHARGE;

typedef enum{
	BT_HFP_PRIVATE_MODE,
	BT_HFP_SPEAKER_MODE
} BT_HFP_AUDIOPATH ;

typedef enum{
	DISABLE_CALL_LIST_NOTIFY,
	ENABLE_CALL_LIST_NOTIFY
} BT_HFP_CALL_NOTIFICATION_MODE;

typedef enum{
	DISABLE_CALL_WAITING,
	ENABLE_CALL_WAITING
} BT_HFP_CALL_WAITING_MODE;

typedef enum{
	DISABLE_CALL_LINE_IDENT,
	ENABLE_CALL_LINE_IDENT
} BT_HFP_CALL_LINE_IDENT;

typedef enum{
	DISABLE_BT_VOICE_RECOGNITION,
	ENABLE_BT_VOICE_RECOGNITION
} BT_HFP_BVRA_MODE;

typedef enum{
	DISABLE_SIRI_EYES_FREE,
	ENABLE_SIRI_EYES_FREE
} BT_HFP_SIRI_EYES_FREE_MODE;

typedef enum{
	SIRI_NOT_AVAILABLE,
	SIRI_AVAILABLE_AND_ENABLED,
	SIRI_AVAILABLE_BUT_NOT_ENABLED
} BT_HFP_SIRI_STATUS;

typedef enum{
	COMMAND_ACKED,
	COMMAND_SEQUENCE_COMPLETED,
	COMMAND_ERROR_INDICATION
} BT_COMMAND_SEQ_STATUS;

typedef enum{
	HFP_GENERAL_MODE,
	HFP_FORD_MODE
} BT_HFP_FORD_MODE;

typedef enum{
    FPM_GENERAL_MODE,
    FPM_FORD_MODE
} BT_FPM_FORD_MODE;

typedef enum{
    BACM_AUTO_CONNECT_OFF,
    BACM_AUTO_CONNECT_PREV,
    BACM_AUTO_CONNECT_SELETED,
    BACM_AUTO_CONNECT_PRIORITY,
    BACM_AUTO_CONNECT_ALL
} BT_BACM_MODE;

// Begin PBAP
typedef enum {
	BT_PBAP_SUPPORTED,
	BT_PBAP_NOT_SUPPORTED,
	BT_PBAP_UNKNOWN
} BT_PBAP_SUPPORT_MODE;

//[20121128, TROY] no use
#if 0
typedef enum {
	UNKNOWN,
	CONTACT_NOT_EXIST,
	CONTACT_EXIST
} BT_PBAP_CONTACT_EXIST;
#endif

// DKLEE
typedef enum{
	PBAP_SERVICE,
	AT_PBAP_SERVICE,
} BT_PBAP_SERVICE;

typedef enum {
	UNKNOWN_MEMORY,
	PHONE_MEMORY,
	SIM_MEMORY,
	INIT_MEMORY
} BT_PBAP_SRC;

typedef enum {
	PBAP_UNKNOWN_TYPE,
	PHONE_BOOK,
	RECENT_CALLS,
	RECEIVED_CALLS,
	MISSED_CALLS,
	COMBINED_CALLS
} BT_PBAP_TYPE;

typedef enum {
	CCH_UNKNOWN_TYPE,
	CCH_RECENT_CALLS,
	CCH_RECEIVED_CALLS,
	CCH_MISSED_CALLS
} BT_PBAP_CCH_TYPE;

typedef enum {
	VCARD_VERSION_2_1,
	VCARD_VERSION_3_0
} BT_PBAP_VCARD_VERSION;

typedef enum{
	VCARD_NAME=1<<0,
	VCARD_FORMATTED_NAME=1<<1,
	VCARD_MOBILE_PHONE=1<<2,
	VCARD_HOME_PHONE=1<<3,
	VCARD_WORK_PHONE=1<<4,
    //VCARD_FAX=1<<5,
    VCARD_OTHER_PHONE=1<<5,
    VCARD_TIME_STAMP=1<<6,
    VCARD_ORGANISATION=1<<7,
    VCARD_WORK_ADDRESS=1<<8,
    VCARD_HOME_ADDRESS=1<<9,
    VCARD_OTHER_ADDRESS=1<<10,
    VCARD_EMAIL=1<<11,
    VCARD_MIDDLE_NAME=1<<12,
	VCARD_PREF_PHONE=1<<14,
    VCARD_NOT_SELECTED=0x7F,

    /////SUPPORT MIDDLE NAME
    VCARD_MIDDLE_NAME_SUPPORT = VCARD_NOT_SELECTED | (VCARD_MIDDLE_NAME)
    /////SUPPORT MIDDLE NAME
} BT_PBAP_VCARD_FIELD;

typedef enum {
	BT_PBAP_DOWNLOAD_SUCCESS,
	BT_PBAP_DOWNLOAD_FAILURE,
	BT_PBAP_DOWNLOAD_ABORT
} BT_PBAP_DOWNLOAD_RESULT;

typedef enum {
	IDLE,
	BEING_DOWNLOADED
} BT_PBAP_DOWNLOAD_STATUS;

typedef enum {
	BT_PBAP_UNKNOWN_SRC,
	BT_PBAP_ONLY_PHONE_MEMORY,
	BT_PBAP_ONLY_SIM_CARD,
	BT_PBAP_ALL_SRC
} BT_PBAP_DOWNLOAD_SRC;

typedef enum {
    MIDDLE_NAME_SUPPORT = true,
    MIDDLE_NAME_NOT_SUPPORT = false
}BT_PBAP_MIDDLE_NAME_SUPPORT;

typedef enum {
	UNKNOWN_ID,
//[20121128, TROY] no use
#if 0
	_ADD_CONTACT_,
	_UPDATE_CONTACT_,
	_REMOVE_CONTACT_,
	_LOCAL_CONTACT_,
	_LOCAL_CONTACTS_DONE_,
	_GET_LOCAL_CONTACTS_,
#endif
	_REMOVE_CONTACTS_WITH_BDADDRESS_,
	_REMOVE_PHONEBOOK_,
	_CONTACT_DOWNLOAD_,
	_CONTACTS_DOWNLOAD_DONE_,
//#ifdef UPDATE_PB_DATA
    _DO_NOT_UPDATE_PB_DATA_,
//#endif
#ifdef _FOR_VR_PERFORMANCE_
	_SAME_PB_DATA_,
	_GET_CRYPTO_HASH_DATA_,
#endif
//[20121128, TROY] no use
#if 0
	_ABORT_CONTACTS_DOWNLOAD_,
	_GET_CONTACTS_COUNT_,
#endif
	_CONTACTS_DOWNLOAD_FAIL_,
	_MISSED_CALL_DOWNLOAD_,
	_RECEIVED_CALL_DOWNLOAD_,
	_RECENT_CALL_DOWNLOAD_,
	_CALL_HISTORY_DOWNLOAD_DONE_,
	_CALL_HISTORY_DOWNLOAD_FAIL_,
//[20121223, TROY] 
#if 1
	_REMOVE_CALL_HISTORY_WITH_BDADDRESS_
#endif
} EDB_MSG_Ids;


//Begin Audio
typedef enum {
	AVRCP_PLAY,
	AVRCP_STOP,
	AVRCP_PAUSE,
	AVRCP_NEXT_SONG,
	AVRCP_PREVIOUS_SONG	
} BT_AV_OPERATION_CODE;

typedef enum {
	TITLE,
	ARTIST,
	ALBUM_NAME,
	CURRENT_TRACK_NUMBER,
	TOTAL_NUMBER_OF_TRACKS,
	GENRE,
	PLAYING_TIME
} BT_AV_INFO_ID;

typedef enum{
	START_STREAMING,
	SUSPEND_STREAMING,
	STOP,
	PLAYING,
	PAUSED,
	FWD_SEEK,
	REV_SEEK,
	TRACK_CHANGED
} BT_AV_STATUS_EVENT;

typedef enum{
	AV_POSITION_FWD_SEEK,
	AV_POSITION_REV_SEEK
} BT_AV_POSITION_CHANGED;

typedef enum{
	FREQ_16_KHZ,
	FREQ_32_KHZ,
	FREQ_44_1_KHZ,
	FREQ_48_KHZ
} BT_AV_SAMPLING_FREQUENCY;

typedef enum{
	REPEAT_OFF,
	REPEAT_SINGLE,
	REPEAT_ALL
} BT_AV_REPEAT_MODE;

typedef enum{
	SHUFFLE_OFF,
	SHUFFLE_ON
} BT_AV_SHUFFLE_MODE;

typedef enum{
	BT_AV_CONNECTED,
	BT_AV_PLAY_STATUS,
	BT_AV_PAUSE_STATUS,
	BT_AV_STOP_STATUS,
} BT_AV_STATUS;

// Begin MAP
typedef enum{
	BT_MAP_DISABLE_MSG_NOTIFICATION,
	BT_MAP_ENABLE_MSG_NOTIFICATION
} BT_MAP_MSG_NOTIFICATION_MODE;

typedef enum {
	NOT_CONNECTED,
	READY,
	MESSAGE_DOWNLOADING
} BT_MAP_MSG_STATUS;

typedef enum {
	SET_ROOT_FOLDER_REQUEST,
	SET_FOLDER_REQUEST,
	SET_FOLDER_BACK_REQUEST
} BT_MAP_FLDR_MODE;

typedef enum {
	SMS_GSM,
	SMS_CDMA,
	EMAIL_SUPPORT,
	MMS_SUPPORT
} BT_MAP_MSG_TYPE;

typedef enum {
	UNREAD,
	READ
} BT_MAP_MSG_READ_STATUS;

typedef enum {
	NOT_DELETED,
	DELETED
} BT_MAP_MSG_DELETE_STATUS;

typedef enum {
	SET_READ,
	SET_DELETE
} BT_MAP_MSG_SET_INDICATOR;

typedef enum {
	SET_GENERAL_SPP,
    SET_PANDORA_SPP,
    SET_AHA_SPP,
    SET_NONE_SPP
} BT_SPP_SET_SPMODE;

typedef enum {
    DH_UNKNOWN = -1,
    DH_KR = 0,
    DH_NA = 1,
    DH_CH = 2,
    DH_GN = 3,
    DH_ME = 4,
    DH_EU = 5,
    DH_CA = 6,
    DH_RU = 7
} BT_ECNR_VARIANT;

// Begin Struct
struct BT_COMMAND_SEQUENCE {
	APP_REQUEST_ID app_req_id;
	BT_COMMAND_ID cmd_id;
	UINT8 cmd_id_flag;	
	UINT8 response_flag;
};

struct BT_DEVICE_ID {
	BT_ID_TYPE type;
	UINT8 value;//0xFF if value is invalid
};

struct BT_AT_COMMAND {
	UINT16 at_cmd_length;
	char at_cmd_data[MAX_PARAM_LENGTH+1];		//char param_data[MAX_PARAM_LENGTH];
};

struct BT_COMMAND_PARAM {
	UINT16 param_length;
	char param_data[MAX_PARAM_LENGTH+1];
	struct BT_COMMAND_PARAM *next;
};

struct BT_APP_MESSAGE {
	BT_COMMAND_ID id;
	BT_COMMAND_PARAM *first_param;
};

struct BT_REQUEST_DATA {
	APP_REQUEST_ID id;
	UINT16 event_param_length;
	char event_param_data[MAX_EVENT_PARAM_LENGTH+1];	
};

struct BT_EVENT_PARAM {
	UINT16 event_param_length;
	char event_param_data[MAX_EVENT_PARAM_LENGTH+1];
	struct BT_EVENT_PARAM *next;
};

struct BT_EVENT_DATA {
	APP_RESPONSE_ID id;
	UINT16 event_param_length;
	char event_param_data[MAX_EVENT_PARAM_LENGTH+1];	
};

struct BT_ERROR_DATA {
	APP_REQUEST_ID app_request_id;
	UINT16 event_error_code;
	BT_ERROR bt_error;
};

struct BT_AG_ERROR_DATA {
	APP_REQUEST_ID app_request_id;
	UINT16 event_error_code;
	BT_CMER_ERROR bt_cmer_error;
};

struct BT_DEV_CONFIG{
	char productor_id[PRODUCTOR_ID_LEN+1];
	char model_id[MODEL_ID_LEN+1];
	char hw_version[HW_VERSION_LEN+1];
	char sw_version_lgit[LGIT_SW_VERSION_LEN+1];
	char sw_version_lge[LGE_SW_VERSION_LEN+1];
	char local_device_name[MAX_DEVICE_NAME_LENGTH+1];
	char local_bd_address[BD_ADDRESS_LENGTH+1];
};

struct BT_DEV_FUNCTION_STATE {
	BT_GAP_STATE gap_state;
	BT_HFP_STATE hfp_state;
	BT_ATPBA_STATE atpba_state;
	BT_A2DP_STATE a2dp_state;
	BT_AVRCP_STATE avrcp_state;
	BT_PBAP_STATE pbap_state;
	BT_MAP_STATE map_state;
	BT_SPP_STATE spp_state;
	BT_DEVICE_ID paired_id;// Optional value: Use 0xFF for not specified.
};

struct BT_DISCOVERY_CONFIG {
	BT_DISCOVERY_TRIGGER trigger;
	UINT16 discovery_timeout;//Max value : 600, Not specified: 0xFFFF
	UINT8 max_discover_devices;//Max value : 30, Not specified: 0xFF
};

struct BT_DISCOVERY_MODE {
	BT_DISCOVERY_ENABLE enable;
	BT_DISCONNECT_CRITERIA mode;
};

struct BT_DISCOVERED_DEVICE {
	BT_DEVICE_ID disc_id;
	UINT8 bd_addr[BD_ADDRESS_LENGTH+1];
	UINT8 cod[COD_LEN+1];
};

struct BT_NAME_DISCOVERY {
	BT_DEVICE_ID disc_id;
	char local_device_name[MAX_DEVICE_NAME_LENGTH+1];
	UINT8 bd_addr[BD_ADDRESS_LENGTH+1];
	UINT8 cod[COD_LEN+1];
};

struct BT_MODULE_CONFIG {
	BT_TRANSPORT_CONFIG bt_uart_config;
	BT_ENABLE_AUTO_CONNECT autoconnect_mode;
};

struct BT_RSSI {
	BT_DEVICE_ID id;
	int rssi_value;
};

struct BT_PINCODE_OPTIONAL{
	BT_VALUE_AVAILABLE avail;
	UINT8 value[MAX_PINCODE_LENGTH+1];// Value is valid only if avail = AVAILABLE
};

struct BT_LEGACY_PAIRING_REQ_RSP {
	BT_DEVICE_ID id;
	BT_LEGACY_PAIRING_RESPONSE legacy_response;
	BT_PINCODE_OPTIONAL pin;
};

struct BT_NUMERIC_OPTIONAL{
	BT_VALUE_AVAILABLE avail;
	UINT8 value[NUMERIC_CODE_LENGTH+1];// Value is valid only if avail = AVAILABLE
};

struct BT_PAIR_CONFIG {
	BT_PAIRING_MODE pairing_mode;
	BT_PINCODE_OPTIONAL pin;
};

struct BT_SSP_CONFIG {
	BT_SSP_STATE state;
	BT_SSP_AUTH mode;
};

struct BT_SSP_REQ {
	BT_DEVICE_ID id;
	BT_SSP_IO_CAP io_capability;
	char device_name[MAX_DEVICE_NAME_LENGTH+1];
	BT_NUMERIC_OPTIONAL pin;
	char bd_address[BD_ADDRESS_LENGTH+1];
};

struct BT_SSP_PAIRING_RSP {
	BT_DEVICE_ID id;
	BT_SSP_RESPONSE ssp_response;
	BT_NUMERIC_OPTIONAL pin;
};

struct BT_PAIRING_RESPONSE {
	BT_PAIRING_TYPE type;
	union{
		BT_LEGACY_PAIRING_RESPONSE legacy;
		BT_SSP_RESPONSE	ssp;
	}response;
};

struct BT_PAIRING_RESULT {
	BT_PAIRING_RESULT_VALUE result;
	BT_DEVICE_ID id;//disc id or remote_id
	BT_DEVICE_ID paired_id;//paired_id.value = 0xFF if pairing failed
	char device_name[MAX_DEVICE_NAME_LENGTH+1];
};

struct BT_SERVICE_DESCR {
	UINT8 hfp_enabled;
	UINT8 a2dp_enabled;
	UINT8 avrcp_enabled;
	UINT8 pbap_enabled;
	UINT8 map_enabled;
	UINT8 spp_enabled;
    UINT8 opp_enabled;
    UINT8 pandora_enabled;
    UINT8 aha_enabled;
};

struct BT_PAIRED_DEVINFO {
	BT_DEVICE_ID paired_id;
	char name[MAX_DEVICE_NAME_LENGTH+1];
	UINT8 bd_addr[BD_ADDRESS_LENGTH+1];
	UINT8 cod[COD_LEN+1];
	UINT8 is_connected;
	UINT8 was_last_connected_device;
};

struct BT_PAIRING_REQ {
	BT_DEVICE_ID disc_id;
	char bd_addr[BD_ADDRESS_LENGTH+1];
	char device_name[MAX_DEVICE_NAME_LENGTH+1];
};

struct BT_SERVICE_DISCOVERY {
	BT_DEVICE_ID paired_id;
	BT_SERVICE_DISC_RESULT result;
	BT_SERVICE_DESCR srv_desc;
};

struct BT_MAP_SERVICE_INFO {
	BT_VALUE_AVAILABLE map_connected;
	UINT8 sms_gsm_supported;
	UINT8 sms_cdma_supported;
	UINT8 email_supported;
	UINT8 mms_supported;
};

struct BT_AVRCP_SERVICE_INFO {
	BT_VALUE_AVAILABLE avrcp_connected;
	AVRCP_VERSION_SUPPORT avrcp_version;
};

struct BT_SERVICE_INFO {
	BT_VALUE_AVAILABLE avail;
	BT_MAP_SERVICE_INFO map_serv_info;
	BT_AVRCP_SERVICE_INFO avrcp_serv_info;
	UINT8 service;
};

struct BT_DEVICE_NAME {
	BT_VALUE_AVAILABLE avail;
	char name[MAX_DEVICE_NAME_LENGTH+1];// Value is valid only if avail = AVAILABLE		
};

struct BT_CONNECTION_RESULT {
	BT_DEVICE_ID paired_id;
	BT_CONNECTION_MODE mode;
	BT_CONNECTION_RESULT_VALUE result;
	BT_SERVICE_DESCR service;
	BT_SERVICE_INFO service_info;
	BT_DEVICE_NAME device;
	UINT8 ucRetryCount;
};

struct BT_CONNECT_DISCONNECT_REQ {
	BT_DEVICE_ID paired_id;
	BT_CONNECTION_MODE mode;
	BT_SERVICE_DESCR service;
};

struct BT_TEST_CMD_CONFIG {
	BT_TEST_CMD_MODE mode;
	BT_TEST_MODE_ENABLE enable;
    UINT8 value;
};

// Begin HFP 
struct BT_HFP_FEATURES {
	UINT8 three_way_call_support;
	UINT8 ec_nr_support;
	UINT8 voice_recognition_support;
	UINT8 inband_ringtone_support;
	UINT8 attachnumber_voicetag_support;
	UINT8 reject_call_support;
	UINT8 enhanced_call_status_support;
	UINT8 enhanced_call_control_support;
	UINT8 extended_error_result_code_support;
};

struct BT_HFP_PEER_INFO {
	BT_DEVICE_ID paired_id;
	BT_HFP_FEATURES features;
};

struct BT_BACM_CONFIG{
    BT_BACM_MODE auto_connect_mode;
    BT_DEVICE_ID paired_id;
};

struct BT_HFP_CIND_CONFIG {
	BT_HFP_CIND_SERVICE_AVAILABILITY availability;
	BT_HFP_CIND_CALL_STATUS call_status;
	BT_HFP_CIND_CALL_SETUP call_setup;
	BT_HFP_CIND_CALL_HELD_STATUS call_held_status;
	BT_HFP_CIND_SIGNAL_STRENGTH signal_strength;
	BT_HFP_CIND_ROAMING_STATUS roaming_status;
	BT_HFP_CIND_BATTERY_CHARGE charge;
};

struct BT_HFP_INCOMING_CALL_IND {
	BT_DEVICE_ID paired_id;
	char call_number[MAX_CALL_NUM_LEN+1];
};

struct BT_HFP_BATTERY_LEVEL_CHANGE_IND {
	BT_DEVICE_ID paired_id;
	BT_HFP_CIND_BATTERY_CHARGE charge;
};

struct BT_HFP_SIGNAL_LEVEL_CHANGE_IND {
	BT_DEVICE_ID paired_id;
	BT_HFP_CIND_SIGNAL_STRENGTH signal_strength;
};

struct BT_HFP_SERVICE_AVAIL_CHANGE_IND {
	BT_DEVICE_ID paired_id;
	BT_HFP_CIND_SERVICE_AVAILABILITY avail;
};

struct BT_HFP_ROAMING_STATUS_CHANGE_IND {
	BT_DEVICE_ID paired_id;
	BT_HFP_CIND_ROAMING_STATUS status;
};

struct BT_HFP_CALL_STATUS_CHANGE_IND {
	BT_DEVICE_ID paired_id;
	BT_HFP_CIND_CALL_STATUS status;
};

struct BT_HFP_CALL_SETUP_STATUS_CHANGE_IND {
	BT_DEVICE_ID paired_id;
	BT_HFP_CIND_CALL_SETUP status;
};

struct BT_HFP_CALL_HELD_STATUS_CHANGE_IND {
	BT_DEVICE_ID paired_id;
	BT_HFP_CIND_CALL_HELD_STATUS status;
};

struct BT_HFP_CUR_CALLINFO {
	UINT8 call_index;
	BT_HFP_CALL_DIRECTION direction;
	BT_HFP_CALL_STATE state;
	BT_HFP_CALL_MODE mode;
	BT_HFP_CALL_MULTIPARTY multiparty;
	char call_number[MAX_CALL_NUM_LEN+1];//optional - value is all zeros when not specified		
	BT_HFP_CALL_TYPE call_type;//optional - value is BT_NOT_SELECTED when not specified
};

struct BT_HFP_CUR_CALLINFO_DONE {
	BOOL bValidFirst;
	BOOL bValidSecond;
	BT_HFP_CUR_CALLINFO btHfpCurCallInfoFirst;
	BT_HFP_CUR_CALLINFO btHfpCurCallInfoSecond;
};

struct BT_HFP_CALL_LINE_IND {
	char call_number[MAX_CALL_NUM_LEN+1];
	BT_HFP_CALL_TYPE call_type;
};

struct BT_HFP_NET_OP_INFO {
	BT_HFP_NET_OP_MODE mode;
	BT_HFP_NET_OP_FORMAT format;
	char net_operator[MAX_NETWORK_OP_NAME_LEN+1];
};

struct BT_HFP_CALL_LIST_NOTIFY_MODE {
	BT_HFP_CALL_NOTIFICATION_MODE mode;
	UINT8 notification_duration;//optional - value is 0xFF if not specified.
};

struct BT_HFP_ECNR_CONFIG {
	BT_HFP_ECNR_MODE btm_mode;
	BT_HFP_ECNR_MODE ag_mode;
};

struct BT_HFP_THREEWAY_CONTROL {
	BT_ECC_ACTION btEccAction;
	int index1;
};

struct BT_HFP_CALL_STATUS {
	BOOL bValid;
	BT_HFP_CALL_STATE ucState;	
	char cstrCallNumber[MAX_CALL_NUM_LEN+1];//optional - value is all zeros when not specified		
};

//Begin PBAP
struct BT_PBAP_IS_SUPPORT
{
	BT_DEVICE_ID paired_id;
	BT_PBAP_SUPPORT_MODE is_pb_support;
	BT_PBAP_SUPPORT_MODE is_atpb_support;
};

struct BT_PBAP_CUR_SIZE {
	BT_DEVICE_ID paired_id;
	BT_PBAP_SERVICE service;
	BT_PBAP_RESULT result;
	UINT16 current_pbap_size;
};

struct BT_PBAP_SIZE_REQUEST {
	BT_DEVICE_ID btPairedId;
	BT_PBAP_SERVICE btPbapService;
	BT_PBAP_SRC btPbapSrc;
	BT_PBAP_TYPE btPbapType;
};

struct BT_PBAP_DNLD_CONF {
	BT_DEVICE_ID paired_id;
	BT_PBAP_TYPE type;
	BT_PBAP_SRC src;
	BT_PBAP_VCARD_VERSION version;
	UINT16 start_index;
	UINT16 end_index;
	BT_PBAP_VCARD_FIELD field;
};

struct BT_PBAP_CONTACT {
	BT_DEVICE_ID paired_id;
	UINT16 index;
	BT_PBAP_TYPE data_type;
	BT_PBAP_SRC src_type;
	BT_PBAP_CCH_TYPE cch_type;
	char first_name[PB_FIRST_NAME_LEN+1];
	char middle_name[PB_MIDDLE_NAME_LEN+1];
	char last_name[PB_LAST_NAME_LEN+1];
	char formatted_name[PB_FORMAT_NAME_LEN+1];
	UINT8 number_type1;
	char number1[PB_MOBILE_NUM_LEN+1];
	UINT8 number_type2;
	char number2[PB_MOBILE_NUM_LEN+1];
	UINT8 number_type3;
	char number3[PB_MOBILE_NUM_LEN+1];
	UINT8 number_type4;
	char number4[PB_MOBILE_NUM_LEN+1];
	UINT8 number_type5;
	char number5[PB_MOBILE_NUM_LEN+1];
	char time_stamp[PB_TIME_STAMP_LEN+1];
	char bd_addr[BD_ADDRESS_LENGTH+1];
};

struct BT_PBAP_CONT_DNLD_DONE {
	BT_DEVICE_ID paired_id;
	BT_PBAP_DOWNLOAD_RESULT result;
	UINT16 total_sent_size;
};

struct BT_PBAP_IMG_DNLD_CONF {
	BT_DEVICE_ID paired_id;
	BT_PBAP_TYPE type;
	BT_PBAP_SRC src;
	BT_PBAP_VCARD_VERSION version;
	UINT16 start_index;
	UINT16 end_index;
};

struct BT_PBAP_IMG {
	UINT16 index;
	UINT16 total_size;
	UINT16 total_frame;
	UINT16 current_frame;
	char image_data[PB_IMAGE_DATA_LENGTH+1];
};

struct BT_PBAP_IMG_DNLD_DONE {
	BT_DEVICE_ID paired_id;
	BT_PBAP_DOWNLOAD_RESULT result;
	UINT16 total_sent_size;
};

struct BT_PBAP_DNLD_STATUS {
	BT_DEVICE_ID paired_id;
	BT_PBAP_DOWNLOAD_STATUS pb_down_status;
	BT_PBAP_DOWNLOAD_STATUS call_list_down_status;
};

struct BT_PBAP_OUTGOING_CALL {
	char strLastDialedNum[PB_MOBILE_NUM_LEN+1];
	int iCount;
};

struct BT_IBOX_CONTACT{
	UINT32  state;
	UINT16  senderHandle;
	UINT32  pbookType;
	UINT32  arrayCount;
	UINT32  mode;
	//char *  name;
	char name[IBOX_CONTACT_NAME_LEN+1];
	UINT32  contact;
	//char *  telephoneNum;
	char telephoneNum[IBOX_MOBILE_NUM_LEN+1];
};

// Begin Audio

struct BT_AV_AVRCP_OPERATION {
	BT_DEVICE_ID btPairedId;
	BT_AV_OPERATION_CODE btAvOperationCode;
};

struct BT_AV_AVRCP_INFORMAION_REQUEST {
	BT_DEVICE_ID btPairedId;
	BOOL bTitle;
	BOOL bArtist;
	BOOL bAlbumName;
	BOOL bCurrentTrackNumber;
	BOOL bTotalTrackNumber;
	BOOL bGenre;
	BOOL bPlayeingTime;
	BOOL bReserved0;
};

struct BT_AV_CUR_PLAY_INFO {
	BT_DEVICE_ID paired_id;
	BT_AV_INFO_ID info_id;
	char info_data[AUDIO_INFO_DATA_LENGTH+1];
};

struct BT_AV_CUR_PLAY_INDICATION {
	BT_DEVICE_ID paired_id;
	int av_event_param;	
};

struct BT_AV_CUR_SAMPLING_FREQUENCY_CHANGED {
	BT_DEVICE_ID paired_id;
	BT_AV_SAMPLING_FREQUENCY frequency;
};

struct BT_AV_CUR_TRACK_INDEX_CHANGED {
	BT_DEVICE_ID paired_id;
	UINT16 new_track_index;
};

struct BT_AV_CUR_PLAY_INFO_CHANGED {
	BT_DEVICE_ID paired_id;
	BT_AV_POSITION_CHANGED av_event;
};

struct BT_AV_PLAYER_MODE {
	BT_DEVICE_ID btPairedId;
	BT_AV_REPEAT_MODE ucRepeatMode;
	BT_AV_SHUFFLE_MODE ucShuffleMode;
};

// Begin MAP
struct BT_MAP_MSG_NOTIFY_CONF {
	BT_DEVICE_ID paired_id;
	BT_MAP_MSG_NOTIFICATION_MODE mode;
};

struct BT_MAP_MSG_IND {
	BT_DEVICE_ID paired_id;
	UINT16 msg_id;
};

struct BT_MAP_MSG_SET_STATUS {
	BT_DEVICE_ID btPairedId;
	UINT16 iMsgId;
	BT_MAP_MSG_SET_INDICATOR btMapMsgSetIndicator;
};

struct BT_MAP_MSG {
	BT_DEVICE_ID paired_id;
	UINT16 msg_id;
	char name[MSG_SENDER_LEN+1];
	char f_name[MSG_SENDER_FORMAT_LEN+1];
	char phone_num[MSG_PHONE_NUM_LEN+1];
	char message[MSG_LEN+1];
};

struct BT_MAP_MSG_SET_FLDR {
	BT_DEVICE_ID btPairedId;
	BT_MAP_FLDR_MODE btMapFldrMode;
	char cstrFolderName[MSG_FOLDER_LENGTH+1];
};

struct BT_MAP_MSG_FLDR_LIST {
	BT_DEVICE_ID paired_id;
	char folder_name[MSG_FOLDER_LENGTH+1];
};

struct BT_MAP_MSG_LIST_REQUEST {
	BT_DEVICE_ID btPairedId;
	int iStartId;
	int iSize;
	char cstrFolderName[MSG_FOLDER_LENGTH+1];
};

struct BT_MAP_MSG_LIST {
	UINT16 msg_id;
	char msg_subject[MSG_SUBJECT_LEN+1];
	char msg_time_stamp[MSG_TIME_STAMP_LENGTH+1];
	char sender_name[MSG_SENDER_LEN+1];
	char phone_number[MSG_PHONE_NUM_LEN+1];
	BT_MAP_MSG_TYPE type;
	UINT16 size;
	BT_MAP_MSG_READ_STATUS read_status;
};

//Begin SPP
struct BT_SPP_RECEIVED_DATA {
	char * received_data;
	UINT8 length;
};

struct BT_SERIAL_DATA {
	int iSize;
	UINT8 cstrSppData[MAX_SPP_PACKET_LENGTH+1];
};

#ifdef PANDORA_DEBUG

typedef enum {
    // Accessory to Mobile
    PNDR_SESSION_START                              = 0x00,
    PNDR_UPDATE_BRANDING_IMAGE                      = 0x01,
    PNDR_RETURN_BRANDING_IMAGE_SEGMENT              = 0x02,
    PNDR_GET_STATUS                                 = 0x03,
    PNDR_SESSION_TERMINATE                          = 0x05,
    PNDR_GET_LISTENER                               = 0x06,
    PNDR_GET_TRACK_INFO                             = 0x10,
    PNDR_GET_TRACK_TITLE                            = 0x11,
    PNDR_GET_TRACK_ARTIST                           = 0x12,
    PNDR_GET_TRACK_ALBUM                            = 0x13,
    PNDR_GET_TRACK_ALBUM_ART                        = 0x14,
    PNDR_SET_TRACK_ELAPSED_POLLING                  = 0x15,
    PNDR_GET_TRACK_INFO_EXTENDED                    = 0x16,
    PNDR_EVENT_TRACK_PLAY                           = 0x30,
    PNDR_EVENT_TRACK_PAUSE                          = 0x31,
    PNDR_EVENT_TRACK_SKIP                           = 0x32,
    PNDR_EVENT_TRACK_RATE_POSITIVE                  = 0x33,
    PNDR_EVENT_TRACK_RATE_NEGATIVE                  = 0x34,
    PNDR_EVENT_TRACK_EXPLAIN                        = 0x35,
    PNDR_GET_TRACK_EXPLAIN                          = 0x36,
    PNDR_EVENT_TRACK_BOOKMARK_TRACK                 = 0x37,
    PNDR_EVENT_TRACK_BOOKMARK_ARTIST                = 0x38,
    PNDR_GET_STATION_ACTIVE                         = 0x40,
    PNDR_GET_STATION_COUNT                          = 0x41,
    PNDR_GET_STATION_TOKENS                         = 0x42,
    PNDR_GET_ALL_STATION_TOKENS                     = 0x43,
    PNDR_GET_STATION_INFO                           = 0x44,
    PNDR_GET_STATIONS_ORDER                         = 0x45,
    PNDR_EVENT_STATIONS_SORT                        = 0x46,
    PNDR_EVENT_STATION_SELECT                       = 0x47,
    PNDR_EVENT_STATION_DELETE                       = 0x48,
    PNDR_EVENT_STATION_CREATE_FROM_CURRENT_ARTIST   = 0x49,
    PNDR_EVENT_STATION_CREATE_FROM_CURRENT_TRACK    = 0x4a,
    PNDR_GET_STATION_ART                            = 0x4b,
    PNDR_EVENT_CANCEL_STATION_ART                   = 0x4c,
    PNDR_GET_GENRE_CATEGORY_COUNT                   = 0x4d,
    PNDR_GET_GENRE_CATEGORY_NAMES                   = 0x4e,
    PNDR_GET_ALL_GENRE_CATEGORY_NAMES               = 0x4f,
    PNDR_GET_GENRE_CATEGORY_STATION_COUNT           = 0x50,
    PNDR_GET_GENRE_STATION_NAMES                    = 0x51,
    PNDR_EVENT_SELECT_GENRE_STATION                 = 0x52,
    PNDR_GET_GENRE_STATION_ART                      = 0x53,
    PNDR_EVENT_CANCEL_GENRE_STATION_ART             = 0x54,
    PNDR_EVENT_SEARCH_AUTO_COMPLETE                 = 0x60,
    PNDR_EVENT_SEARCH_EXTENDED                      = 0x61,
    PNDR_GET_SEARCH_RESULT_INFO                     = 0x62,
    PNDR_EVENT_SEARCH_SELECT                        = 0x63,
    PNDR_EVENT_SEARCH_DISCARD                       = 0x64,
    PNDR_EVENT_OPEN_APP                             = 0x70,
    // debugging command
    PNDR_ECHO_REQUEST                               = 0x7f,
    // Mobile to Accessory
    PNDR_GET_BRANDING_IMAGE                         = 0x80,
    PNDR_UPDATE_STATUS                              = 0x81,
    PNDR_RETURN_STATUS                              = 0x82,
    PNDR_UPDATE_NOTICE                              = 0x83,
    PNDR_RETURN_LISTENER                            = 0x85,
    PNDR_UPDATE_TRACK                               = 0x90,
    PNDR_RETURN_TRACK_INFO                          = 0x91,
    PNDR_RETURN_TRACK_TITLE                         = 0x92,
    PNDR_RETURN_TRACK_ARTIST                        = 0x93,
    PNDR_RETURN_TRACK_ALBUM                         = 0x94,
    PNDR_RETURN_TRACK_ALBUM_ART_SEGMENT             = 0x95,
    PNDR_UPDATE_TRACK_ALBUM_ART                     = 0x96,
    PNDR_UPDATE_TRACK_ELAPSED                       = 0x97,
    PNDR_UPDATE_TRACK_RATING                        = 0x98,
    PNDR_UPDATE_TRACK_EXPLAIN                       = 0x99,
    PNDR_RETURN_TRACK_EXPLAIN_SEGMENT               = 0x9a,
    PNDR_UPDATE_TRACK_BOOKMARK_TRACK                = 0x9b,
    PNDR_UPDATE_TRACK_BOOKMARK_ARTIST               = 0x9c,
    PNDR_RETURN_TRACK_INFO_EXTENDED                 = 0x9d,
    PNDR_UPDATE_TRACK_COMPLETED                     = 0x9e,
    PNDR_RETURN_STATION_ACTIVE                      = 0xb1,
    PNDR_RETURN_STATION_COUNT                       = 0xb2,
    PNDR_RETURN_STATION_TOKENS                      = 0xb3,
    PNDR_RETURN_STATION_INFO                        = 0xb4,
    PNDR_RETURN_STATIONS_ORDER                      = 0xb5,
    PNDR_UPDATE_STATIONS_ORDER                      = 0xb6,
    PNDR_UPDATE_STATION_DELETED                     = 0xb7,
    PNDR_RETURN_STATION_ART_SEGMENT                 = 0xb8,
    PNDR_RETURN_GENRE_CATEGORY_COUNT                = 0xb9,
    PNDR_UPDATE_STATION_ACTIVE                      = 0xba,
    PNDR_RETURN_GENRE_CATEGORY_NAMES                = 0xbb,
    PNDR_RETURN_GENRE_CATEGORY_STATION_COUNT        = 0xbc,
    PNDR_RETURN_GENRE_STATION_NAMES                 = 0xbd,
    PNDR_RETURN_GENRE_STATION_ART_SEGMENT           = 0xbe,
    PNDR_UPDATE_SEARCH                              = 0xd0,
    PNDR_RETURN_SEARCH_RESULT_INFO                  = 0xd1,
    PNDR_UPDATE_STATION_ADDED                       = 0xd2,
    // debugging command
    PNDR_ECHO_RESPONSE                              = 0xff
}PANDORA_CMD_ID;

#endif //PANDORA_DEBUG

#ifdef AHA_PACKET_DEBUG
//Aha frame
struct BT_AHA_HEADER {
    UINT16 ahaId;
    UINT16 length;
    UINT16 packetId;
    UINT16 opcode;
    UINT16 checksum;
};

struct BT_AHA_FRAME {
    struct BT_AHA_HEADER header;
    UINT8 data[];
};

typedef enum {
    INVAILD_AHA_CMD                                     = 0x0000,
    //REMOTE-INITIATED COMMAND SET
    START_PEER_SESSION                              = 0x0001,
    VEHICLE_INFORMATION_UPDATE                      = 0x0002,
    QUERY_STATIONS                                  = 0x0004,
    QUERY_STATION_PARAMETERS                        = 0x0006,
    QUERY_STATION_CONTENT                           = 0x0007,
    QUERY_CONTENT_PARAMETERS                        = 0x0008,
    QUERY_BINARY_DATA                               = 0x0009,
    POST_NEW_RECORDING                              = 0x000A,
    QUERY_CURRENT_STATION_CONTENT_SELECTION_STATE   = 0x000B,
    SELECT_STATION_FOR_PLAYBACK                     = 0x000C,
    SELECT_CONTENT_FOR_PLAYBACK                     = 0x000D,
    CHANGE_CLIENT_PLAYBACK_STATE                    = 0x000E,
    TIME_SHIFT_CONTENT                              = 0x000F,
    REQUEST_MORE_CONTENT_FOR_STATION                = 0x0010,
    PERFORM_ACTION                                  = 0x0011,
    REQUEST_CURRENT_CONTENT_DISPLAY_INFORMATION     = 0x0012,
    QUERY_3RD_PARTY_CONNECTIVITY                    = 0x0013,
    QUERY_STRING_PARAMETER_BY_NAME                  = 0x0014,
    LOCAL_SEARCH                                    = 0x0015,
    SET_STATION_CONFIG                              = 0x0016,
    GET_STATION_CONFIG                              = 0x0017,
    POST_TEXT_TO_STATION                            = 0x0018,
    GET_STATIONS                                    = 0x0019,
    ADD_STATION                                     = 0x001A,
    REMOVE_STATION                                  = 0x001B,
    GET_WEATHER                                     = 0x001C,
    OPEN_APP                                        = 0x0070,

   //CLIENT-INITIATED_COMMAND_SET
    NOTIFY_PLAYBACK_OF_NEW_STATION					= 0x0101,
    NOTIFY_NEW_CONTENT_PLAYBACK_STATE               = 0x0102,
    NOTIFY_NEW_CONTENT_AVAILABLE                    = 0x0103,
    NOTIFY_CONTENT_DELETED                          = 0x0104,
    NOTIFY_CLIENT_STATUS_UPDATE                     = 0x0105,
    NOTIFY_CLIENT_POSITION_UPDATE                   = 0x0106,
    NOTIFY_3RD_PARTY_CONNECTIVITY_STATE_CHANGE      = 0x0107,
    NOTIFY_SUBSCRIBED_STATION_LIST_CHANGE           = 0x0108,
    NOTIFY_PENDING_REQUEST                          = 0x0109,
    NOTIFY_PLAYBACK_PROGRESS                        = 0x010A
} AHA_CMD_ID;

typedef enum {
    NO_ERROR                = 0x0000,
    PROT_NOT_SUPPORTED      = 0x0001,
    SESSION_REJECTED        = 0x0002,
    CARINFO_REJECTED        = 0x0003,
    LOCATION_UNAVAILABLE	= 0x0004,
    NETWORK_ERROR           = 0x0005,
    INVALID_OPERATION       = 0x0006,
    NOT_LOGGED_IN           = 0x0007,
    LOGIN_FAILED            = 0x0008,
    INVALID_ROOMID          = 0x0011,
    INVALID_STATIONID       = 0x0012,
    INVALID_CONTENTID       = 0x0013,
    INVALID_PARAMETER       = 0x0014,
    INVALID_RESOURCE        = 0x0015,
    INVALID_ACTION          = 0x0016,
    NEED_MYFEEDS_STATION	= 0x0017,
    UNAVAILABLE_RESOURCE	= 0x0021,
    INCOMPLETE_UPLOAD       = 0x0022,
    INCONSISTENT_LENGTH     = 0x0023,
    CANNOT_TIMESHIFT        = 0x0031
} AHA_ERROR_CODE;
#endif

struct BT_ECHO {
	int iSize;
	char cstrEcho[MAX_SPP_PACKET_LENGTH+1];
};

struct BT_FIRMWARE_DATA {
	int iNumber;
	int iSize;
	UINT8 cstrFirmwareData[MAX_FIRMWARE_DATA_SIZE+1];
	//UINT32 iCheckCrc;
};

struct BT_ECNR_VERSION_INFO {
    BT_ECNR_VARIANT country_variant;
    char checksum[ECNR_CHECKSUM_LEN +1];
    char release_date[ECNR_DATE_LEN +1];
};

struct BT_ECNR_PRAM_DATA {
    int iIndex;
    int iSize;
    char cEcnrPrameter[ECNR_PARAMETER_UNIT_SIZE];
};

//#ifdef __PROJECTION__
//projection
struct BT_SSPOOB_REQ
{
    int deviceId;
    char bd_address[BD_ADDRESS_LENGTH+1];
    UINT8 hash_value[MAX_PINCODE_LENGTH+1];    //hash Parameter
    UINT8 random_value[MAX_PINCODE_LENGTH+1];  //Random value
};

//projection
struct BTAPP_AAP_MODE {
    int  iPortNumber;
    BOOL bIsConnect;
    char bd_address[BD_ADDRESS_LENGTH+1];
};
//#endif

typedef union
{
	struct
	{
		unsigned short hfp_enabled		:1;		// Bit0
		unsigned short a2dp_enabled		:1;		// Bit1
		unsigned short avrcp_enabled	:1;		// Bit2
		unsigned short pbap_enabled		:1;		// Bit3
		unsigned short map_enabled		:1;		// Bit4
		unsigned short spp_enabled		:1;		// Bit5
		unsigned short opp_enabled		:1;		// Bit6
        unsigned short pandora_enabled	:1;		// Bit7

        unsigned short aha_enabled		:1;		// Bit8
		unsigned short reserved09		:1;		// Bit9
		unsigned short reserved10		:1;		// Bit10
		unsigned short reserved11		:1;		// Bit11
		unsigned short reserved12		:1;		// Bit12
		unsigned short reserved13		:1;		// Bit13
		unsigned short reserved14		:1;		// Bit14
		unsigned short reserved15		:1;		// Bit15
	} bit;
	unsigned short usBytes;
} BT_SERVICE_ENABLE;

typedef union
{
	struct
	{
		unsigned char title				:1;		// Bit0	
		unsigned char artist			:1;		// Bit1
		unsigned char album_name		:1;		// Bit2
		unsigned char track_number		:1;		// Bit3
		unsigned char total_track		:1;		// Bit4
		unsigned char genre				:1;		// Bit5
		unsigned char play_time			:1;		// Bit6
		unsigned char reserved1			:1;		// Bit7
	} bit;
	unsigned char ucBytes;
} BT_AVRCP_MEDIA_INFO;

typedef union
{
	struct
	{
		unsigned int three_way_call_support			:1;		// Bit0
		unsigned int ec_nr_support					:1;		// Bit1
		unsigned int voice_recognition_support		:1;		// Bit2
		unsigned int inband_ringtone_support		:1;		// Bit3
		unsigned int attachnumber_voicetag_support	:1;		// Bit4
		unsigned int reject_call_support			:1;		// Bit5
		unsigned int enhanced_call_status_support	:1;		// Bit6
		unsigned int enhanced_call_control_support	:1;		// Bit7

		unsigned int extended_error_result_code_support	:1;		// Bit8
		unsigned int reserved9			:1;		// Bit9
		unsigned int reserved10			:1;		// Bit10
		unsigned int reserved11			:1;		// Bit11
		unsigned int reserved12			:1;		// Bit12
		unsigned int reserved13			:1;		// Bit13
		unsigned int reserved14			:1;		// Bit14
		unsigned int reserved15			:1;		// Bit15

		unsigned int reserved16			:1;		// Bit16
		unsigned int reserved17			:1;		// Bit17
		unsigned int reserved18			:1;		// Bit18
		unsigned int reserved19			:1;		// Bit19
		unsigned int reserved20			:1;		// Bit20
		unsigned int reserved21			:1;		// Bit21
		unsigned int reserved22			:1;		// Bit22
		unsigned int reserved23			:1;		// Bit23

		unsigned int reserved24			:1;		// Bit24
		unsigned int reserved25			:1;		// Bit25
		unsigned int reserved26			:1;		// Bit26
		unsigned int reserved27			:1;		// Bit27
		unsigned int reserved28			:1;		// Bit28
		unsigned int reserved29			:1;		// Bit29
		unsigned int reserved30			:1;		// Bit30
		unsigned int reserved31			:1;		// Bit31
	} bit;
	unsigned int uiBytes;
} BT_BRSF_FEATURE;

typedef BT_COMMAND_ID myTypeBtCommandId;
typedef BT_COMMAND_SEQ_STATUS myTypeBtCommandSeqStatus;
typedef QVector<QStringList> myTypeSQLiteResult;

struct BT_CONFIGURE {
	BT_DEVICE_ENABLE device_enable;
	BT_DISCOVERY_ENABLE discovery_enable;
	BT_ENABLE_AUTO_CONNECT enable_auto_connect;
	UINT8 pbap_auto_download;
	UINT8 callhistory_auto_download;
	UINT8 map_enable;
	UINT8 audio_enable;
};


struct BtPinyinInfo
{
    uint m_order;
    QString m_pinyin;

    BtPinyinInfo()
        : m_order(0)
        , m_pinyin("")
    { /* do nothing */ }

    BtPinyinInfo(uint order, const QString& pinyin)
        : m_order(order)
        , m_pinyin(pinyin)
    { /* do nothing */ }

    uint getOrder(void)  { return m_order; }
    QString getPinyin(void) { return m_pinyin; }

    bool isEmpty(void) { return (0 == m_order); }
};
#endif /* __COMMON_H__ */
