                                                              -*- outline -*-

* src/base64                                                  
** Make parsing more robust
   Currently we don't cope with overlong lines in the best way.
** Check that we really release the ksba reader/writer objects.

* sm/call-agent.c
** Some code should go into import.c
** When we allow concurrent service request in gpgsm, we
   might want to have an agent context for each service request
   (i.e. Assuan context).

* sm/certchain.c
** Try to keep certificate references somewhere
  This will help with some of our caching code.  We also need to test
  that caching; in particular "regtp_ca_chainlen".

* sm/decrypt.c
** replace leading zero in integer hack by a cleaner solution

* sm/gpgsm.c
** mark all unimplemented commands and options.
** Implement --default-key
** support the anyPolicy semantic
** Check that we are really following the verification procedures in rfc3280.


* sm/keydb.c
** Check file permissions
** Check that all error code mapping is done.
** Remove the inter-module dependencies between gpgsm and keybox
** Add an source_of_key field

* agent/
** If we detect that a private key has been deleted
   Bump the key event counter.

* agent/command.c
** Make sure that secure memory is used where appropriate

* agent/pkdecrypt.c, agent/pksign.c
** Support DSA

* Move pkcs-1 encoding into libgcrypt.

* Use a MAC to protect sensitive files.
  The problem here is that we need yet another key and it is unlikely
  that users are willing to remember that key too.  It is possible to
  do this with a smartcard, though.

* sm/export.c
** Return an error code or a status info per user ID.

* scd/tlv.c
  The parse_sexp function should not go into this file.  Check whether
  we can change all S-expression handling code to make use of this
  function.

* scd
** Application context vs. reader slot
  We have 2 concurrent method of tracking whether a read is in use:
  Using the session_list in command.c and the lock_table in app.c.  IT
  would be better to do this just at one place. First we need to see
  how we can support cards with multiple applications.
** Detecting a removed card works only after the ticker detected it.
  We should check the card status in open-card to make this smoother.
  Needs to be integrated with the status file update, though.  It is
  not a real problem because application will get a card removed
  status and should the send a reset to try solving the problem.

** Add a test to check the extkeyusage.

* Windows port
** Signals are not support 
    This means we can't reread a configuration
** No card status notifications.

* sm/
** check that we issue NO_SECKEY xxx if a -u key was not found
   We don't. The messages returned are also wrong (recipient vs. signer).

* jnlib/
** provide jnlib_malloc and try to remove all jnlib_xmalloc.

* g10/
** issue a NO_SECKEY xxxx if a -u key was not found.


* When requiring libksba 1.0.1
** Remove the extra GPG_ERR_NO_VALUE tests 
   They have need added on 2006-10-18 to fix a libksba problem.

* When switching to libgcrypt 1.3
** scd#encode_md_for_card, g10#encode_md_value, sm@do_encode_md
   Remove the extra test for a valid algorithm as libgcrypt will do it
   then in gcry_md_algo_info.
** skclist.c
   Remove the hard coded constant in random_is_faked.
** g10/ Replace DIGEST_ALGO_SHA224
   We can't do that right now because it is only defined by newer
   versions of libgcrypt. 
** GCRY_MD_USER
   Remove these definitions.
** MY_GCRY_PK_ECDSA
   Removed this.

* Extend selinux support to other modules

* Remove -sat PGP2 compatibility hack

* UTF-8 specific TODOs

* Pinpad Reader
  We do not yet support P15 applications.  The trivial thing using
  ASCII characters will be easy to implement but the other cases need
  some more work.

* Bugs
** After disabling scdaemon and sending a HUP
   scdaemon stays as a zombie and gpg-agent does not perform any more
   commands.




