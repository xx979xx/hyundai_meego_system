/*
 * This file was generated by qdbusxml2cpp version 0.7
 * Command line was: qdbusxml2cpp -v -c EngModeIf -p EngModeIf.h:EngModeIf.cpp com.lge.car.eng.xml
 *
 * qdbusxml2cpp is Copyright (C) 2011 Nokia Corporation and/or its subsidiary(-ies).
 *
 * This is an auto-generated file.
 * Do not edit! All changes made to it will be lost.
 */

#ifndef ENGMODEIF_H_1325131932
#define ENGMODEIF_H_1325131932

#ifdef __ENG_MODE__

#include <QtCore/QObject>
#include <QtCore/QByteArray>
#include <QtCore/QList>
#include <QtCore/QMap>
#include <QtCore/QString>
#include <QtCore/QStringList>
#include <QtCore/QVariant>
#include <QtDBus/QtDBus>

/*
 * Proxy class for interface com.lge.car.eng
 */
class EngModeIf: public QDBusAbstractInterface
{
    Q_OBJECT
public:
    static inline const char *staticInterfaceName()
    { return "com.lge.car.eng"; }

public:
    EngModeIf(const QString &service, const QString &path, const QDBusConnection &connection, QObject *parent = 0);

    ~EngModeIf();

    enum ConnectInfo
    {
        Raido_Antenna,            //0
        DMB_Antenna,		  //1
        GPS_Antenna,		  //2
        Modem_Antenna,		  //3
        XM_SIRIUS_Antenna,        //4
        USB_ConnectInfo,           //5
        iPod_ConnectInfo,           //6
        AUX_ConnectInfo,           //7
        DAB_ConnectInfo
    };

    enum Connetivity
    {
        Unconnected,    // 0
        Connected,       // 1
    };

    enum DbusAppInfo
    {
        App_DMB,           //0
        App_Navi,           //1
        App_Radio,          //2
        App_XM ,           //3
        App_RDS ,          //4
        App_Bluetooth ,    //5
        App_TTS,           //6
        App_DECK,         //7
        App_VR,           //8
        App_DAB,
        App_CAMERA_AVM,
        App_CAMERA_PGS
    };


public Q_SLOTS: // METHODS
    inline QDBusPendingReply<> ConnectivityInfo(int in0, int in1)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0) << qVariantFromValue(in1);
        return asyncCallWithArgumentList(QLatin1String("ConnectivityInfo"), argumentList);
    }

    inline QDBusPendingReply<> VersionInfo(int in0, const QString &in1)
    {
        QList<QVariant> argumentList;
        argumentList << qVariantFromValue(in0) << qVariantFromValue(in1);
        return asyncCallWithArgumentList(QLatin1String("VersionInfo"), argumentList);
    }

    inline QDBusPendingReply<> resDiagnosisEnd(int in0)
        {
            QList<QVariant> argumentList;
            argumentList << qVariantFromValue(in0);
            return asyncCallWithArgumentList(QLatin1String("resDiagnosisEnd"), argumentList);
        }

Q_SIGNALS: // SIGNALS
    void reqConnectivity(int in0);
    void reqDiagnosis();
    void reqVersion(int in0);
};

namespace com {
  namespace lge {
    namespace car {
      typedef ::EngModeIf eng;
    }
  }
}
#endif //__ENG_MODE__

#endif
