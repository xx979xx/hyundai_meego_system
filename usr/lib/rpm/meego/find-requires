#!/bin/bash

#
# Auto-generate requirements for executables (both ELF and a.out) and library
# sonames, script interpreters, and perl modules.
#

ulimit -c 0

#
# --- Set needed to 0 for traditional find-requires behavior.
needed=1
if [ X"$1" = Xldd ]; then
    needed=0
elif [ X"$1" = Xobjdump ]; then
    needed=1
fi
[ -z "$OBJDUMP" ] && OBJDUMP=objdump

#
# --- Grab the file manifest and classify files.
#filelist=`sed "s/['\"]/\\\&/g"`
filelist=`sed "s/[]['\"*?{}]/\\\\\&/g"`
exelist=`echo $filelist | xargs -r file | egrep -v ":.* (commands|script) " | \
	grep ":.*executable" | cut -d: -f1`
scriptlist=`echo $filelist | xargs -r file | \
	egrep ":.* (commands|script) " | cut -d: -f1`
liblist=`echo $filelist | xargs -r file | \
	grep ":.*shared object" | cut -d : -f1`

interplist=
perllist=
pythonlist=
tcllist=

#
# --- Alpha does not mark 64bit dependencies
case `uname -m` in
  alpha*)	mark64="" ;;
  *)		mark64="()(64bit)" ;;
esac

if [ "$needed" -eq 0 ]; then
#
# --- Executable dependency sonames.
  for f in $exelist; do
    [ -r $f -a -x $f ] || continue
    lib64=`if file -L $f 2>/dev/null | \
	grep "ELF 64-bit" >/dev/null; then echo "$mark64"; fi`
    ldd $f | awk '/=>/ {
	if ($1 !~ /libNoVersion.so/ && $1 !~ /4[um]lib.so/ && $1 !~ /libmeego-kernel.so/) {
	    gsub(/'\''"/,"\\&",$1);
	    printf "%s'$lib64'\n", $1
	}
    }'
  done | xargs -r -n 1 basename | sort -u

#
# --- Library dependency sonames.
  for f in $liblist; do
    [ -r $f ] || continue
    lib64=`if file -L $f 2>/dev/null | \
	grep "ELF 64-bit" >/dev/null; then echo "$mark64"; fi`
    ldd $f | awk '/=>/ {
	if ($1 !~ /libNoVersion.so/ && $1 !~ /4[um]lib.so/ && $1 !~ /libmeego-kernel.so/) {
	    gsub(/'\''"/,"\\&",$1);
	    printf "%s'$lib64'\n", $1
	}
    }'
  done | xargs -r -n 1 basename | sort -u
fi

#
# --- Script interpreters.
for f in $scriptlist; do
    [ -r $f -a -x $f ] || continue
    interp=`head -n 1 $f | sed -e 's/^\#\![ 	]*//' | cut -d" " -f1`
    interplist="$interplist $interp"
    case $interp in
    */perl)	perllist="$perllist $f" ;;
    esac
done
[ -n "$interplist" ] && { echo "$interplist" | tr '[:blank:]' \\n | sort -u ; }

#
# --- Add perl module files to perllist.
for f in $filelist; do
    [ -r $f -a "${f%.pm}" != "${f}" ] && perllist="$perllist $f"
done

#
# --- Weak symbol versions (from glibc).
[ -n "$mark64" ] && mark64="(64bit)"
for f in $liblist $exelist ; do
    [ -r $f ] || continue
    lib64=`if file -L $f 2>/dev/null | \
	grep "ELF 64-bit" >/dev/null; then echo "$mark64"; fi`
    $OBJDUMP -p $f | awk 'BEGIN { START=0; LIBNAME=""; needed='$needed'; }
	/^$/ { START=0; }
	/^Dynamic Section:$/ { START=1; }
	(START==1) && /NEEDED/ {
	    if (needed) {
		if ("'$lib64'" != "") {
		    sub(/$/, "()'$lib64'", $2) ;
		}
		print $2 ;
	    }
	}
	(START==2) && /^[A-Za-z]/ { START=3; }
	/^Version References:$/ { START=2; }
	(START==2) && /required from/ {
	    sub(/:/, "", $3);
	    LIBNAME=$3;
	}
	(START==2) && (LIBNAME!="") && ($4!="") {
	    print LIBNAME "(" $4 ")'$lib64'";
	}
    '
done | sort -u

#
# --- Perl modules.
[ -x /usr/lib/rpm/meego/perl.req -a -n "$perllist" ] && \
    echo $perllist | tr '[:blank:]' \\n | /usr/lib/rpm/meego/perl.req | sort -u

#
# --- Python modules.
[ -x /usr/lib/rpm/meego/python.req -a -n "$pythonlist" ] && \
    echo $pythonlist | tr '[:blank:]' \\n | /usr/lib/rpm/meego/python.req | sort -u

#
# --- Tcl modules.
[ -x /usr/lib/rpm/meego/tcl.req -a -n "$tcllist" ] && \
    echo $tcllist | tr '[:blank:]' \\n | /usr/lib/rpm/meego/tcl.req | sort -u

#
# --- Kernel module imported symbols
#
# Since we don't (yet) get passed the name of the package being built, we
# cheat a little here by looking first for a kernel, then for a kmod.
#

unset is_kmod

for f in $filelist; do
    if [ $(echo "$f" | sed -r -ne 's:^.*/lib/modules/(.*)/(.*).ko$:\2:p') ]
    then
        is_kmod=1;
    elif [ $(echo "$f" | sed -r -ne 's:^.*/boot/(.*):\1:p') ]
    then
	unset is_kmod;
	break;
    fi
done

# Disabling for now while the Fedora kernel doesn't produce kABI deps.
#[ -x /usr/lib/rpm/meego/find-requires.ksyms ] && [ "$is_kmod" ] &&
#    printf "%s\n" "${filelist[@]}" | /usr/lib/rpm/meego/find-requires.ksyms

exit 0
