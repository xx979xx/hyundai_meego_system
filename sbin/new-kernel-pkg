#!/bin/bash
#
# new-kernel-pkg
# Invoked upon installation or removal of a kernel package, the following
# tasks are/can be done here:
# creation/removal of initrd
# run of depmod/removal of depmod generated files
# addition/removal of kernel images from grub/lilo configuration (via grubby)
#
# Copyright 2002-2008 Red Hat, Inc.  All rights reserved.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#

PATH=/sbin:/bin:$PATH

lilo=/sbin/lilo
syslinux=/sbin/extlinux

# some defaults that are sane for most arches
kernelName=vmlinuz

if [ -x ./grubby ]; then
    grubby=./grubby
else
    grubby=/sbin/grubby
fi

[ -f /etc/sysconfig/kernel ] && . /etc/sysconfig/kernel

cfgGrub=""
cfgLilo=""
cfgSyslinux=""
runLilo=""
runSyslinux=""
grubConfig=""
syslinuxConfig=""

ARCH=$(uname -m)

if [ $ARCH = 'ia64' ]; then
    liloConfig=/boot/efi/EFI/redhat/elilo.conf
    bootPrefix=/boot/efi/EFI/redhat
    liloFlag=elilo
    isx86=""
elif [ $ARCH = 'ppc64' -o $ARCH = 'ppc' ]; then
    liloConfig=/etc/yaboot.conf
    bootPrefix=/boot
    lilo=/sbin/ybin
    liloFlag=yaboot
    runLilo="yes"
    isx86=""
elif [ $ARCH = 'sparc' -o $ARCH = 'sparc64' ]; then
    liloConfig=/etc/silo.conf
    bootPrefix=/boot
    liloFlag=silo
    lilo=/sbin/silo
    isx86=""
elif [ $ARCH = 's390' -o $ARCH = 's390x' ]; then
    liloConfig=/etc/zipl.conf
    bootPrefix=/boot
    liloFlag=zipl
    lilo=/sbin/zipl
    runLilo="yes"
    isx86=""
else
    # this leaves i?86 and x86_64
    liloConfig=/etc/lilo.conf
    grubConfig=$(readlink -f /etc/grub.conf 2>/dev/null)
    syslinuxConfig="/boot/extlinux/extlinux.conf"
    bootPrefix=/boot
    liloFlag=lilo
    isx86="yes"
    syslinuxFlag=extlinux
    runSyslinux="yes"
fi

mode=""
version=""
initrd=""
dracut=""
initrdfile=""
moddep=""
verbose=""
makedefault=""
package=""
mbkernel=""
mbargs=""
adddracutargs=""
addplymouthinitrd=""

usage() {
    echo "Usage: `basename $0` [-v] [--mkinitrd] [--rminitrd] [--dracut]" >&2 
    echo "       [--initrdfile=<initrd-image>] [--depmod] [--rmmoddep]" >&2
    echo "       [--kernel-args=<args>] [--remove-args=<args>]" >&2 
    echo "       [--banner=<banner>] [--multiboot=multiboot]" >&2
    echo "       [--mbargs=mbargs] [--make-default] [--add-dracut-args]" >&2
    echo "       [--add-plymouth-initrd]" >&2
    echo "       <--install | --remove | --update | --rpmposttrans> <kernel-version>" >&2
    echo "       (ex: `basename $0` --mkinitrd --depmod --install 2.4.7-2)" >&2
    exit 1
}

setdefaultmenu() {
    kernver=$1
    if [ -z "$kernver" ] ; then
        lineno=$(sed -n "/menu default/=" /boot/extlinux/extlinux.conf)
        if [ -n "$lineno" ] ; then
            return
        fi
    fi
    # unset old menu default
    sed -i '/.*menu default.*/d' /boot/extlinux/extlinux.conf
    # flag new menu default
    lineno=$(sed -n "/kernel vmlinuz-${kernver}/=" /boot/extlinux/extlinux.conf)
    if [ -n "$lineno" ] ; then
        for firstlineno in $lineno
        do
            lineno=$firstlineno
            break
        done
        sed -i "${lineno} s/^.*kernel /\tmenu default\n\tkernel /" /boot/extlinux/extlinux.conf
    fi
}

install() {
    # XXX kernel should be able to be specified also (or work right on ia64)
    if [ ! -f $bootPrefix/$kernelName-$version ] ; then
	[ -n "$verbose" ] && echo "kernel for $version does not exist, not running grubby"
	return
    fi
    
    INITRD=""
    if [ -f $initrdfile ]; then
	[ -n "$verbose" ] && echo "found $initrdfile and using it with grubby"
	INITRD="--initrd $initrdfile"

	if [ -n "$addplymouthinitrd" ]; then
	    INITRD="$INITRD --extra-initrd $bootPrefix/initrd-plymouth.img"
	fi
    fi

    # FIXME: is this a good heuristic to find out if we're on iSeries?
    if [ -d /proc/iSeries ]; then
	[ -n "$verbose" ] && echo "On an iSeries, just making img file"
	if [ -z $initrdfile  ]; then
	    [ -n "$verbose" ] && echo "No initrd, just adding system map"
	    /sbin/addSystemMap $bootPrefix/System.map-$version $bootPrefix/$kernelName-$version $bootPrefix/vmlinitrd-$version
	else
	    /sbin/addSystemMap $bootPrefix/System.map-$version $bootPrefix/$kernelName-$version $bootPrefix/vmlinux.sm-$version
	    /sbin/addRamDisk $initrdfile $bootPrefix/System.map-$version $bootPrefix/vmlinux.sm-$version $bootPrefix/vmlinitrd-$version 2>/dev/null
	    rm $bootPrefix/vmlinux.sm-$version
	fi
	return
    fi

    # get the root filesystem to use, must be device name instead of UUID
    rootdevice=$(awk '{ if ($1 !~ /^[ \t]*#/ && $2 == "/") { print $1; }}' /etc/fstab)
    if [ "${rootdevice::5}" == "UUID=" ] ; then
        rootdevice=$(blkid | awk -F":" -v pat="${rootdevice:5}" '$0 ~ pat {print $1;}')
    fi

    if [ -n "$mbkernel" -a -n "$cfgLilo" -a "$liloFlag" != "elilo" ]; then
	[ -n "$verbose" ] && echo "multiboot specified, not updating lilo.conf"
	cfgLilo=""
    fi

    if [ -n "$cfgGrub" ]; then
	[ -n "$verbose" ] && echo "adding $version to $grubConfig"

	if [ -n "$banner" ]; then
            title="$banner ($version)"
	elif [ -f /etc/redhat-release ]; then
	    title="$(sed -e 's/ release.*$//' -e q < /etc/meego-release) ($version)"
	else
	    title="MeeGo ($version)"
	fi
	$grubby --add-kernel=$bootPrefix/$kernelName-$version \
	    $INITRD --copy-default $makedefault --title "$title" \
	    ${mbkernel:+--add-multiboot="$mbkernel"} ${mbargs:+--mbargs="$mbargs"} \
	    --args="root=$rootdevice $kernargs" --remove-kernel="TITLE=$title"
    else
	[ -n "$verbose" ] && echo "$grubConfig does not exist, not running grubby"
    fi

    if [ -n "$cfgLilo" ]; then
	[ -n "$verbose" ] && echo "adding $version to $liloConfig"

	$grubby --add-kernel=$bootPrefix/$kernelName-$version $INITRD \
		--copy-default $makedefault --title $version \
		${mbkernel:+--add-multiboot="$mbkernel"} ${mbargs:+--mbargs="$mbargs"} \
		--args="root=$rootdevice $kernargs" --remove-kernel="TITLE=$version" \
		--$liloFlag

	if [ -n "$runLilo" ]; then 
	    [ -n "$verbose" ] && echo "running $lilo"
	    if [ ! -x $lilo ] ; then
		[ -n "$verbose" ] && echo "$lilo does not exist"
	    else
		$lilo > /dev/null
	    fi
	fi
    else
	[ -n "$verbose" ] && echo "$liloConfig does not exist, not running grubby"
    fi

    if [ -n "$cfgSyslinux" ]; then
	[ -n "$verbose" ] && echo "adding $version to $syslinuxConfig"

	$grubby --add-kernel=$bootPrefix/$kernelName-$version $INITRD \
		--copy-default $makedefault --title $version \
		${mbkernel:+--add-multiboot="$mbkernel"} ${mbargs:+--mbargs="$mbargs"} \
		--args="root=$rootdevice $kernargs" --remove-kernel="TITLE=$version" \
		--$syslinuxFlag

        #Change menu label
	sed -i "s/^default .*$/default menu.c32/" /boot/extlinux/extlinux.conf
	sed -i "s/^default=.*$//" /boot/extlinux/extlinux.conf
	lineno=$(sed -n "/vmlinuz-${version}/=" /boot/extlinux/extlinux.conf)
	if [ -n "$lineno" ] ; then
		lineno=$((lineno-1))
		sed -i "${lineno} s/menu label.*$/menu label MeeGo (${version})/; s/\/vmlinuz/vmlinuz/" /boot/extlinux/extlinux.conf
		cp -f $bootPrefix/$kernelName-$version /boot/extlinux/
	fi

        #Set as default menu
        setdefaultmenu "${version}"

	if [ -n "$runSyslinux" ]; then 
	    [ -n "$verbose" ] && echo "running $syslinux"
	    if [ ! -x $syslinux ] ; then
		[ -n "$verbose" ] && echo "$syslinux does not exist"
	    else
		$syslinux --update /boot/extlinux > /dev/null 2>&1
	    fi
	fi
    else
	[ -n "$verbose" ] && echo "$syslinuxConfig does not exist, not running grubby"
    fi
}

rpmposttrans()
{
    local files
    local f
    files="/etc/kernel/postinst.d/*[^~] /etc/kernel/postinst.d/$version/*[^~]"
    for f in $files ; do
	[ -f $f -a -x $f ] || continue
	$f $version $bootPrefix/$kernelName-$version
    done
}

remove() {
    # FIXME: is this a good heuristic to find out if we're on iSeries?
    if [ -d /proc/iSeries ]; then
	[ -n "$verbose" ] && echo "On an iSeries, remove img file"
	rm -f $bootPrefix/$kernelName-$version.img 2>/dev/null
	return
    fi

    local files
    local f
    files="/etc/kernel/prerm.d/*[^~] /etc/kernel/prerm.d/$version/*[^~]"
    for f in $files ; do
	[ -f $f -a -x $f ] || continue
	$f $version $bootPrefix/$kernelName-$version
    done

    if [ -n "$cfgGrub" ]; then
	[ -n "$verbose" ] && echo "removing $version from $grubConfig"
	$grubby --remove-kernel=$bootPrefix/$kernelName-$version
    else
	[ -n "$verbose" ] && echo "$grubConfig does not exist, not running grubby"
    fi

    if [ -n "$cfgLilo" ]; then
	[ -n "$verbose" ] && echo "removing $version from $liloConfig"
	$grubby --remove-kernel=$bootPrefix/$kernelName-$version	    \
		     --$liloFlag

	if [ -n "$runLilo" ]; then 
	    [ -n "$verbose" ] && echo "running $lilo"
	    if [ ! -x $lilo ] ; then
		[ -n "$verbose" ] && echo "$lilo does not exist"
	    else
		$lilo > /dev/null
	    fi
	fi
    else
	[ -n "$verbose" ] && echo "$liloConfig does not exist, not running grubby"
    fi

    if [ -n "$cfgSyslinux" ]; then
	[ -n "$verbose" ] && echo "removing $version from $syslinuxConfig"
	$grubby --remove-kernel=$bootPrefix/$kernelName-$version	    \
		     --$syslinuxFlag
        rm -f /boot/extlinux/$kernelName-$version
	sed -i "s/^default .*$/default menu.c32/" /boot/extlinux/extlinux.conf
	sed -i "s/^default=.*$//" /boot/extlinux/extlinux.conf

        #Set default memu
        setdefaultmenu ""

	if [ -n "$runSyslinux" ]; then 
	    [ -n "$verbose" ] && echo "running $syslinux"
	    if [ ! -x $syslinux ] ; then
		[ -n "$verbose" ] && echo "$syslinux does not exist"
	    else
		$syslinux --update /boot/extlinux > /dev/null 2>&1
	    fi
	fi
    else
	[ -n "$verbose" ] && echo "$syslinuxConfig does not exist, not running grubby"
    fi
}

update() {
    if [ -n "$cfgGrub" ]; then
	[ -n "$verbose" ] && echo "updating $version from $grubConfig"
	$grubby --update-kernel=$bootPrefix/$kernelName-$version \
	    ${kernargs:+--args="$kernargs"} \
	    ${removeargs:+--remove-args="$removeargs"}	
    else
	[ -n "$verbose" ] && echo "$grubConfig does not exist, not running grubby"
    fi

    if [ -n "$cfgLilo" ]; then
	[ -n "$verbose" ] && echo "updating $version from $liloConfig"
	$grubby --update-kernel=$bootPrefix/$kernelName-$version \
	    ${kernargs:+--args="$kernargs"} \
	    ${removeargs:+--remove-args="$removeargs"}	\
		     --$liloFlag

	if [ -n "$runLilo" ]; then 
	    [ -n "$verbose" ] && echo "running $lilo"
	    if [ ! -x $lilo ] ; then
		[ -n "$verbose" ] && echo "$lilo does not exist"
	    else
		$lilo > /dev/null
	    fi
	fi
    else
	[ -n "$verbose" ] && echo "$liloConfig does not exist, not running grubby"
    fi

    if [ -n "$cfgSyslinux" ]; then
	[ -n "$verbose" ] && echo "updating $version from $syslinuxConfig"
	$grubby --update-kernel=$bootPrefix/$kernelName-$version \
	    ${kernargs:+--args="$kernargs"} \
	    ${removeargs:+--remove-args="$removeargs"}	\
		     --$syslinuxFlag
	rm -f /boot/extlinux/vmlinuz-`/bin/uname -r`
	sed -i "s/^default .*$/default menu.c32/" /boot/extlinux/extlinux.conf
	sed -i "s/^default=.*$//" /boot/extlinux/extlinux.conf

	if [ -n "$runSyslinux" ]; then 
	    [ -n "$verbose" ] && echo "running $syslinux"
	    if [ ! -x $syslinux ] ; then
		[ -n "$verbose" ] && echo "$syslinux does not exist"
	    else
		$syslinux --update /boot/extlinux > /dev/null 2>&1
	    fi
	fi
    else
	[ -n "$verbose" ] && echo "$syslinuxConfig does not exist, not running grubby"
    fi
}

mkinitrd() {
    if [ -n "$dracut" ]; then
        tool="/sbin/dracut -f $initrdfile $version"
    else
	tool="/sbin/mkinitrd --allow-missing -f $initrdfile $version"
    fi
    [ -n "$verbose" ] && echo "creating initrd: $tool"
    $tool
    rc=$?
    if [ $rc != 0 ]; then
	echo "mkinitrd failed" >&2
	exit 1
    fi
}

rminitrd() {
    [ -n "$verbose" ] && echo "removing initrd $initrdfile"
    [ -f $initrdfile ] && rm -f $initrdfile
}

doDepmod() {
    [ -n "$verbose" ] && echo "running depmod for $version"
    depmod -ae -F /boot/System.map-$version $version
}

doRmmoddep() {
    [ -n "$verbose" ] && echo "removing modules.dep info for $version"
    [ -d /lib/modules/$version ] && rm -f /lib/modules/$version/modules.*    
}


while [ $# -gt 0 ]; do
    case $1 in
	--mkinitrd)
	    initrd="make"
	    ;;

	--rminitrd)
	    initrd="remove"
	    ;;

	--dracut)
	    dracut=--dracut
	    ;;

	--initrdfile*)
	    if echo $1 | grep '=' >/dev/null ; then
	    	initrdfile=`echo $1 | sed 's/^--initrdfile=//'`
	    else
		initrdfile=$2
		shift
	    fi		    
	    ;;

	--kernel-args*)
	    if echo $1 | grep '=' >/dev/null ; then
	    	kernargs=`echo $1 | sed 's/^--kernel-args=//'`
	    else
		kernargs=$2
		shift
	    fi		    
	    ;;

	--remove-args*)
	    if echo $1 | grep '=' >/dev/null ; then
	    	removeargs=`echo $1 | sed 's/^--remove-args=//'`
	    else
		removeargs=$2
		shift
	    fi		    
	    ;;

	--banner*)
	    if echo $1 | grep '=' >/dev/null ; then
	    	banner=`echo $1 | sed 's/^--banner=//'`
	    else
		banner=$2
		shift
	    fi		    
	    ;;

	--multiboot*)
	    if echo $1 |grep '=' >/dev/null; then
		mbkernel=`echo $1 | sed 's/^--multiboot=//'`
	    else
		# can't really support having an optional second arg here
		# sorry!
		mbkernel="/boot/xen.gz"
	    fi
	    ;;

	--mbargs*)
	    if echo $1 |grep '=' >/dev/null; then
		mbargs=`echo $1 | sed 's/^--mbargs=//'`
	    else
		mbargs="$2"
		shift
	    fi
	    ;;

	--depmod)
	    moddep="make"
	    ;;

	--rmmoddep)
	    moddep="remove"
	    ;;

	--make-default)
	    makedefault="--make-default"
	    ;;

	--package)
	    if echo $1 | grep '=' >/dev/null ; then
	    	package=`echo $1 | sed 's/^--package=//'`
	    else
		package=$2
		shift
	    fi		    
	    ;;

	--add-dracut-args)
	    adddracutargs=--add-dracut-args
	    ;;

	--add-plymouth-initrd)
	    addplymouthinitrd=--add-plymouth-initrd
	    ;;

	-v)
	    verbose=-v
	    ;;

	*)
	    if [ -z "$mode" ]; then
		mode=$1
	    elif [ -z "$version" ]; then
		version=$1
	    else
		usage
	    fi
	    ;;
    esac

    shift
done

# make sure the mode is valid
if [ "$mode" != "--install" -a "$mode" != "--remove"  -a "$mode" != "--update" -a "$mode" != "--rpmposttrans" ] ; then
    usage
fi

if [ -z "$version" ]; then
    usage
fi

if [ "$mode" != "--install" -a "$makedefault" ]; then
    usage
fi

kernelmajor=`echo $kernel | cut -d . -f 1,2`

# kernel image for 2.4 is vmlinux
if [ $ARCH = 'ppc64' -o $ARCH = 'ppc' ]; then
  if [ "$kernelmajor" == "2.4" ]; then
      kernelName=vmlinux
  fi
fi


# set the initrd file based on arch; ia64 is the only currently known oddball
if [ -z "$initrdfile" ]; then
    INITRD_NAME_PREFIX="initrd"
    if [ -n "$dracut" ]; then
	INITRD_NAME_PREFIX="initramfs"
    fi

    if [ `uname -m` = "ia64" ]; then
	initrdfile="/boot/efi/EFI/redhat/$INITRD_NAME_PREFIX-$version.img"
    else
	initrdfile="/boot/$INITRD_NAME_PREFIX-$version.img"
    fi

fi
[ -n "$verbose" ] && echo "initrdfile is $initrdfile"

# add dracut i18n, keyboard and plymouth kernel args if requested
if [ -n "$dracut" -o -n "$adddracutargs" ]; then
    [ -r /etc/sysconfig/keyboard ] && . /etc/sysconfig/keyboard 
    [ -r /etc/sysconfig/i18n ] && . /etc/sysconfig/i18n

    for i in SYSFONT SYSFONTACM UNIMAP LANG KEYTABLE; do
        val=$(eval echo \$$i)
        [ -n "$val" ] && kernargs="$kernargs $i=$val"
    done

    if [ -n "$KEYBOARDTYPE" -a "$KEYBOARDTYPE" != "pc" ]; then
         kernargs="$kernargs KEYBOARDTYPE=$KEYBOARDTYPE"
    fi
fi

# set this as the default if we have the package and it matches
if [ "$mode" == "--install" -a "$UPDATEDEFAULT" == "yes" -a -n "$package" -a -n "$DEFAULTKERNEL" -a "$package" == "$DEFAULTKERNEL" ]; then
    makedefault="--make-default"
    [ -n "$verbose" ] && echo "making it the default based on config"
fi

if [ "$moddep" == "make" ]; then
    doDepmod
elif [ "$moddep" == "remove" ]; then
    doRmmoddep
fi

if [ "$initrd" == "make" ]; then
    mkinitrd
elif [ "$initrd" == "remove" ]; then
    rminitrd
fi

if [ ! -x $grubby ] ; then
    [ -n "$verbose" ] && echo "$grubby does not exist"
    exit 0
fi


[ -n "$grubConfig" ] && [ -f "$grubConfig" ] && cfgGrub=1;
[ -n "$liloConfig" ] && [ -f "$liloConfig" ] && cfgLilo=1;
[ -n "$syslinuxConfig" ] && [ -f "$syslinuxConfig" ] && cfgSyslinux=1;

# if we have a lilo config on an x86 box, see if the default boot loader
# is lilo to determine if it should be run
if [ -n "$cfgLilo" -a -n "$isx86" ]; then
    runLilo=$($grubby --bootloader-probe | grep lilo)
fi

if [ "$mode" == "--install" ]; then
    install
elif [ "$mode" == "--remove" ]; then
    remove
elif [ "$mode" == "--update" ]; then
    update
elif [ "$mode" == "--rpmposttrans" ]; then
    rpmposttrans
fi

exit 0
