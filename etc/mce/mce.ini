# Configuration file for MCE

[Modules]

# Path to modules
#
# Do not modify unless you're sure that you know what you're doing!
ModulePath=/usr/lib/mce/modules

# Modules
#
# List of modules to load
# Note: the name should not include the "lib"-prefix
Modules=radiostates;displaymeego;keypad;led;battery;filter-brightness-als;inactivity;alarm;callstate;audiorouting;proximity;powersavemode


[HomeKey]

# Try to make this possible somehow
# [HomeKey] keycode
# HomeKeyCode=Key_F5

# Timeout before keypress is regarded as a long press
#
# Timeout in milliseconds, default 800
HomeKeyLongDelay=800


[PowerKey]

# Timeout before keypress is regarded as a medium press
# This delay is used when powering up from charging
#
# Timeout in milliseconds, default 1000
PowerKeyMediumDelay=1000

# Timeout before keypress is regarded as a long press
#
# Timeout in milliseconds, default 1500
PowerKeyLongDelay=1500

# Timeout for double keypresses
#
# Timeout in milliseconds, default 500
PowerKeyDoubleDelay=500

# Short [power] behaviour
#
# WARNING:
# Setting short, long, and double press to disabled will make it
# near impossible to turn off your device without removing the battery!
#
# Valid options:
# disabled - do nothing on short press
# poweroff - shutdown device
# softpoweroff - enter soft poweroff mode
# tklock-lock - lock touchscreen/keypad lock in not locked
# tklock-unlock - unlock the touchscreen/keypad lock if locked
# tklock-both - lock the touchscreen/keypad if not locked,
#               unlock the touchscreen/keypad lock if locked
# dbus-signal-<signal name> - send a D-Bus signal with the name <signal name>
PowerKeyShortAction=tklock-lock

# Long [power] behaviour
#
# Valid options:
# disabled - do nothing on long press
# poweroff - shutdown device <default>
# softpoweroff - enter soft poweroff mode
# tklock-lock - lock touchscreen/keypad lock in not locked
# tklock-unlock - unlock the touchscreen/keypad lock if locked
# tklock-both - lock the touchscreen/keypad if not locked,
#               unlock the touchscreen/keypad lock if locked
# dbus-signal-<signal name> - send a D-Bus signal with the name <signal name>
PowerKeyLongAction=poweroff

# Double press [power] behaviour
# Note: the double press action is triggered on press, rather than release,
#       to avoid the second press to be processed elsewhere before the
#       double press action has taken place
#
# Valid options:
# disabled - do nothing on double press <default>
# poweroff - shutdown device
# softpoweroff - enter soft poweroff mode
# tklock-lock - lock touchscreen/keypad lock in not locked
# tklock-unlock - unlock the touchscreen/keypad lock if locked
# tklock-both - lock the touchscreen/keypad if not locked,
#               unlock the touchscreen/keypad lock if locked
# dbus-signal-<signal name> - send a D-Bus signal with the name <signal name>
# PowerKeyDoubleAction=dbus-signal-powerkey_double_ind
PowerKeyDoubleAction=disabled


[SoftPowerOff]

# Charger connect policy
#
# Valid options:
# wakeup - wake up from soft poweroff when a charger is connected
# ignore - remain in soft poweroff when a charger is connected
ChargerPolicyConnect=ignore


[TKLock]

# Blank immediately instead of dim before blank when tklock is enabled
#
# 1 to blank immediately, 0 to dim before blanking
BlankImmediately=1

# Dim immediately instead of having a timeout before dimming
# when tklock is enabled
#
# 1 to dim immediately, 0 to wait for timeout
DimImmediately=1

# Timeout before dimming
#
# Timeout in seconds, default 3
DimDelay=3

# Policy for touchscreen interrupts
#
# 2 - leave keypad interrupts on even after blanking
#     (used to support double-tap wakeup)
# 1 - disable immediately
# 0 - wait until display is blanked
DisableTSImmediately=1

# Policy for keypad interrupts
#
# 2 - leave keypad interrupts on even after blanking
#     (used to support pass-through of +/-)
# 1 - disable interrupts immediately
# 0 to wait until display is blanked
DisableKPImmediately=2

# Inhibit autolock when keyboard slide is open
#
# 1 - allow autolock when the keyboard slide is open
# 0 - inhibit autolock when the keyboard slide is open
AutolockWhenSlideOpen=0

# Inhibit proximity sensor based locking during calls
# when keyboard slide is open
#
# 1 - allow proximity lock when the keyboard slide is open
# 0 - inhibit proximity lock when the keyboard slide is open
ProximityLockWhenSlideOpen=0

# Always enable tklock when closing keyboard slide
#
# 1 - lock when keyboard slide is closed
# 0 - only enable lock when keyboard slide is closed if it was enabled
#     before opening the slide and there has been no input
AlwaysLockOnSlideClose=0

# Unlock the tklock if the camera is popped out
#
# 1 to enable, 0 to disable
CameraPopoutUnlock=1

# Unlock the tklock if the lens cover is opened
#
# 1 to enable, 0 to disable
LensCoverUnlock=1

# Trigger unlock screen with volume keys
# Note: you need to set DisableKPImmediately=2 for this to work
#
# 1 to enable, 0 to disable
TriggerUnlockScreenWithVolumeKeys=0


[KeyPad]

# Timeout before disabling keyboard backlight when unused
#
# Timeout in seconds, default 30
BacklightTimeout=30

# Fade in time for keyboard backlight
#
# Timeout in milliseconds, default 125;
#                          valid values: 0, 125, 250, 375, 500
#                                           625, 750, 875, 1000
BacklightFadeInTime=250

# Fade out time for keyboard backlight
#
# Timeout in milliseconds, default 250;
#                          valid values: 0, 125, 250, 375, 500
#                                           625, 750, 875, 1000
BacklightFadeOutTime=1000


[Display]

# Policy for display brightness increase
# Note: for displays that use hardware-driven fading this setting
#       does not have any effect
#
# direct - Instantly switch to the new brightness level
# steptime - Fade to the new value with fixed step-time
#             (larger difference in brightness == longer fadetime)
# constanttime - Fade to the new value with constant time
BrightnessIncreasePolicy=constanttime

# Step-time for brightness increase
#
# Steptime in milliseconds, default 5;
#                           valid values: 5, 10, 20, 30, 40, 50
StepTimeIncrease=5

# Constant time for brightness increase
#
# Constant time in milliseconds, default: 2000
#                           valid values: 2000-5000
ConstantTimeIncrease=2000

# Policy for display brightness decrease
# Note: for displays that use hardware-driven fading this setting
#       does not have any effect
#
# direct - Instantly switch to the new brightness level
# steptime - Fade to the new value with fixed step-time
#             (larger difference in brightness == longer fadetime)
# constanttime - Fade to the new value with constant time
BrightnessDecreasePolicy=constanttime

# Step-time for brightness decrease
#
# Steptime in milliseconds, default 10;
#                           valid values: 5, 10, 20, 30, 40, 50
StepTimeDecrease=10

# Constant time for brightness decrease
#
# Constant time in milliseconds, default: 3000
#                           valid values: 2000-5000
ConstantTimeDecrease=3000


[ALS]

# Policy for brightness level step-downs
#
# direct - Switch to next brightness level immediately
# unblank - Only step down the brightness after a blank->unblank cycle
StepDownPolicy=direct


[LED]

# List of patterns for the LED functionality
#
# A list of all pattern names that should be configured
LEDPatterns=PatternPowerOn;PatternPowerOff;PatternCommunication;PatternCommunicationAndBatteryFull;PatternBatteryCharging;PatternBatteryChargingFlat;PatternBatteryFull;PatternDeviceSoftOff
CombinationRules=CombinationCommunicationAndBatteryFull


[LEDPatternMonoRX34]

# Patterns used for the RX-34 hardware;
# this hardware has a single-colour LED without a dedicated engine
# Please prefix pattern names with Pattern to avoid name space clashes
#
# Note: For power management purposes, remember to keep try to keep the
#       onPeriod relatively short (not shorter than 50ms though),
#       the offPeriod long; if this is not possible, make sure to have
#       a timeout for the pattern so that it goes off after 15-30 seconds
#
# Priority (0 - highest, 255 - lowest)
# ScreenOn - 0 only show pattern when the display is off
#            1 show pattern even when the display is on
#            2 only show pattern when the display is off, including acting dead
#            3 show pattern even when the display is on, including acting dead
#            4 only show pattern if the display is off, or if in acting dead
#            5 always show pattern, even if LED disabled
# Timeout in seconds before pattern is disabled, 0 for infinite
# OnPeriod time in milliseconds
# OffPeriod time in milliseconds
#      (0 for continuous light; ONLY when the charger is connected!)
# Intensity in steps from 0 (off) to 15 (full intensity)
PatternDeviceOn=254;0;0;75;5000;10
PatternDeviceSoftOff=253;0;0;100;10000;5
PatternPowerOn=9;3;0;2000;1000;15
PatternPowerOff=10;3;0;2000;1000;15
PatternCommunication=30;1;0;250;2000;15
PatternCommunicationCall=30;1;0;250;2000;15
PatternCommunicationIM=30;1;0;250;2000;15
PatternCommunicationSMS=30;1;0;250;2000;15
PatternCommunicationEmail=30;1;0;250;2000;15
PatternCommonNotification=30;1;0;250;2000;15
PatternWebcamActive=255;0;0;0;0;0
PatternBatteryCharging=50;4;0;500;7500;10
PatternBatteryFull=40;4;0;1500;0;10

# This example pattern has a priority of 42 (all patterns with a *lower*
# priority value will have precedence), an on-period of 0.5 seconds,
# and an off-period of 1.5 seconds.  The pattern will be active for
# 30 seconds, then stop.  The brightness level will be 10 (with 15 being
# the maximum, this would amount to 66%.
# This pattern will be visible even when the display is on.
PatternExample=42;1;30;500;1500;10


[LEDPatternNJoyRX44]

# Patterns used for the RX-44 hardware;
# this hardware has an RGB LED connected to a NJoy controller
# Please prefix pattern names with Pattern to avoid name space clashes
#
# Priority (0 - highest, 255 - lowest)
# ScreenOn - 0 only show pattern when the display is off
#            1 show pattern even when the display is on
#            2 only show pattern when the display is off, including acting dead
#            3 show pattern even when the display is on, including acting dead
#            4 only show pattern if the display is off, or if in acting dead
#            5 always show pattern, even if LED disabled
# Timeout in seconds before pattern is disabled, 0 for infinite
# R-channel pattern in NJoy format (16 commands at most)
# G-channel pattern in NJoy format (16 commands at most)
# B-channel pattern in NJoy format (16 commands at most)
#
# 0000 -- Jump to the start of the pattern for the channel
# 40xx -- Set channel brightness
# xxyy -- Increment/decrement
#      xx determines the speed;
#         01-3f -- short step time (granularity 0.49ms)
#         41-7f -- long step time (granularity 15.6ms)
#      yy determines the increment/decrement steps
#         00-7f -- increment steps 00 = 0 steps, 7f = 127 steps
#         80-ff -- decrement steps 80 = 0 steps, ff = 127 steps
#
#         Use 0 steps to create pauses
#         Two consecutive increment/decrement sequences are needed
#         to cover the entire range from 0-255
# c000 -- End pattern execution
# e002 -- Send red trigger
# e004 -- Send green trigger
# e008 -- Send blue trigger
# e080 -- Wait for red trigger
# e100 -- Wait for green trigger
# e200 -- Wait for blue trigger
PatternDeviceOn=254;0;0;4000205f20df7f007f007f007f000000;4000205f20df7f007f007f007f000000;4000205f20df7f007f007f007f000000
PatternDeviceSoftOff=253;0;0;4000203f20bf7f007f007f007f007f000000;4000203f20bf7f007f007f007f007f000000;0000
PatternPowerOn=9;3;0;4000207f207f01ff01ffc000;4000207f207f01ff01ffc000;4000207f207f01ff01ffc000
PatternPowerOff=10;3;0;4000017f017f36ff36ff7f00c000;4000017f017f36ff36ff7f00c000;4000017f017f36ff36ff7f00c000
PatternCommunication=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationCall=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationIM=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationSMS=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationEmail=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommonNotification=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternWebcamActive=20;1;0;4000027f027fc000;0000;0000
PatternBatteryCharging=50;4;0;0000;4000257f06ff7f0041000000;0000
PatternBatteryFull=40;4;0;0000;407f0000;0000

# This example pattern has a priority of 42 (all patterns with a *lower*
# priority value will have precedence), and will flash in yellow
# This pattern will be visible even when the display is on.
PatternExample=42;1;30;4000167f167f17ff17ff0000;4000167f167f17ff17ff0000;0000


[LEDPatternNJoyRX48]

# Patterns used for the RX-48 hardware;
# this hardware has an RGB LED connected to a NJoy controller
# Please prefix pattern names with Pattern to avoid name space clashes
#
# Priority (0 - highest, 255 - lowest)
# ScreenOn - 0 only show pattern when the display is off
#            1 show pattern even when the display is on
#            2 only show pattern when the display is off, including acting dead
#            3 show pattern even when the display is on, including acting dead
#            4 only show pattern if the display is off, or if in acting dead
#            5 always show pattern, even if LED disabled
# Timeout in seconds before pattern is disabled, 0 for infinite
# R-channel pattern in NJoy format (16 commands at most)
# G-channel pattern in NJoy format (16 commands at most)
# B-channel pattern in NJoy format (16 commands at most)
#
# 0000 -- Jump to the start of the pattern for the channel
# 40xx -- Set channel brightness
# xxyy -- Increment/decrement
#      xx determines the speed;
#         01-3f -- short step time (granularity 0.49ms)
#         41-7f -- long step time (granularity 15.6ms)
#      yy determines the increment/decrement steps
#         00-7f -- increment steps 00 = 0 steps, 7f = 127 steps
#         80-ff -- decrement steps 80 = 0 steps, ff = 127 steps
#
#         Use 0 steps to create pauses
#         Two consecutive increment/decrement sequences are needed
#         to cover the entire range from 0-255
# c000 -- End pattern execution
# e002 -- Send red trigger
# e004 -- Send green trigger
# e008 -- Send blue trigger
# e080 -- Wait for red trigger
# e100 -- Wait for green trigger
# e200 -- Wait for blue trigger
PatternDeviceOn=254;0;0;4000e100207e207ee00420fe20fee0047f007f007f007f000000;4000e0024a15e0804a95e0807f007f007f007f000000;0000
PatternDeviceSoftOff=253;0;0;4000204f20cf7f007f007f007f007f000000;4000204f20cf7f007f007f007f007f000000;0000
PatternPowerOn=9;3;0;4000207f207f01ff01ffc000;4000207f207f01ff01ffc000;4000207f207f01ff01ffc000
PatternPowerOff=10;3;0;4000017f017f36ff36ff7f00c000;4000017f017f36ff36ff7f00c000;4000017f017f36ff36ff7f00c000
PatternCommunication=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationCall=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationIM=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationSMS=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommunicationEmail=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternCommonNotification=30;1;0;0000;0000;40007f00017f017f050001ff01ff0000
PatternWebcamActive=20;1;0;4000027f027fc000;0000;0000
PatternBatteryCharging=50;4;0;0000;4000257f06ff7f0041000000;0000
PatternBatteryFull=40;4;0;0000;407f0000;0000

# This example pattern has a priority of 42 (all patterns with a *lower*
# priority value will have precedence), and will flash in yellow
# This pattern will be visible even when the display is on.
PatternExample=42;1;30;4000167f167f17ff17ff0000;4000167f167f17ff17ff0000;0000


[LEDPatternLystiRX51]

# Patterns used for the RX-51 hardware;
# this hardware has an RGB LED connected to a Lysti controller
# Please prefix pattern names with Pattern to avoid name space clashes
#
# Priority (0 - highest, 255 - lowest)
# ScreenOn - 0 only show pattern when the display is off
#            1 show pattern even when the display is on
#            2 only show pattern when the display is off, including acting dead
#            3 show pattern even when the display is on, including acting dead
#            4 only show pattern if the display is off, or if in acting dead
#            5 always show pattern, even if LED disabled
# Timeout in seconds before pattern is disabled, 0 for infinite
# LED(s) to map to Engine 1/Engine 2
#         "r", "g", "b" maps the LED to engine 1
#         "R", "G", "B" maps the LED to engine 2
#         Example:
#            "rG" maps the red LED to engine 1,
#                      the green LED to engine 2,
#		       and leaves the blue LED unmapped
#         Avoid mapping the same LEDs to both engines...
# Engine 1 pattern in Lysti format (16 commands at most)
# Engine 2 pattern in Lysti format (16 commands at most)
#
# 0000 -- Jump to the start of the pattern for the channel
# 40xx -- Set channel brightness
# 9d80 -- Refresh Mux (use as first command in every pattern!)
# xxyy -- Increment/decrement
#      xx determines the speed;
#         02-3f -- short step time (granularity 0.49ms)
#         42-7f -- long step time (granularity 15.6ms)
#
#	  If xx is even, increment
#         If xx is odd, decrement
#      yy determines the increment/decrement steps
#         00-ff -- in/decrement steps
#
#         Use 0 steps to create pauses
# c000 -- End pattern execution
# e002 -- Send engine 1 trigger
# e004 -- Send engine 2 trigger
# e008 -- Send engine 3 trigger <used by key backlight!>
# e080 -- Wait for engine 1 trigger
# e100 -- Wait for engine 2 trigger
# e200 -- Wait for engine 3 trigger <used by key backlight!>
PatternDeviceOn=254;0;0;rgb;9d804000422043207f100000;9d800000
PatternDeviceSoftOff=253;0;0;rg;9d804000423f433f7f100000;9d800000
PatternPowerOn=9;3;0;rgb;9d80400042ff02ffc000;9d800000
PatternPowerOff=10;3;0;rgb;9d80400001ff43ff7f007f00c000;9d800000
PatternCommunication=30;1;0;b;9d80400002ff03ff02ff03ff71080000;9d800000
PatternCommunicationCall=30;1;0;b;9d80400002ff03ff02ff03ff71080000;9d800000
PatternCommunicationIM=30;1;0;b;9d80400002ff03ff02ff03ff71080000;9d800000
PatternCommunicationSMS=30;1;0;b;9d80400002ff03ff02ff03ff71080000;9d800000
PatternCommunicationEmail=30;1;0;b;9d80400002ff03ff02ff03ff71080000;9d800000
PatternCommonNotification=30;1;0;b;9d80400002ff03ff02ff03ff71080000;9d800000
PatternWebcamActive=20;1;0;r;9d80400004ffc0000000;9d800000
PatternBatteryCharging=50;4;0;rg;9d804000427f0d7f7f007f0042000000;9d800000
PatternBatteryFull=40;4;0;g;9d80407f0000;9d800000

# This example pattern has a priority of 42 (all patterns with a *lower*
# priority value will have precedence), and will flash in yellow
# This pattern will be visible even when the display is on.
PatternExample=42;1;30;rg;9d80400044ff45ff0000;9d800000


[LEDPatternLystiRM680]

# Patterns used for the RM-680/RM-690 hardware;
# this hardware has a single-colour LED connected to a Lysti controller
# Please prefix pattern names with Pattern to avoid name space clashes
#
# Priority (0 - highest, 255 - lowest)
# ScreenOn - 0 only show pattern when the display is off
#            1 show pattern even when the display is on
#            2 only show pattern when the display is off, including acting dead
#            3 show pattern even when the display is on, including acting dead
#            4 only show pattern if the display is off, or if in acting dead
#            5 always show pattern, even if LED disabled
# Timeout in seconds before pattern is disabled, 0 for infinite
# Pattern in Lysti format (16 commands at most)
#
# 0000 -- Jump to the start of the pattern for the channel
# 40xx -- Set channel brightness
# 9d80 -- Refresh Mux (use as first command in every pattern!)
# xxyy -- Increment/decrement
#      xx determines the speed;
#         02-3f -- short step time (granularity 0.49ms)
#         42-7f -- long step time (granularity 15.6ms)
#
#	  If xx is even, increment
#         If xx is odd, decrement
#      yy determines the increment/decrement steps
#         00-ff -- in/decrement steps
#
#         Use 0 steps to create pauses
# c000 -- End pattern execution

# FIXME: sloooooow breathing
PatternDeviceSoftOff=253;0;0;9d804000423f433f7f100000

PatternPowerOn=9;3;0;9d80400012ff03ffc000
PatternPowerOff=10;3;0;9d80400002ff1bffc000
PatternCommunication=30;1;0;9d80400004ff05ff04ff05ff437f0000
PatternBatteryCharging=50;4;0;9d804000427f437f433f0000
PatternBatteryChargingFlat=50;4;0;9d80407f7f007f007f007f004000437f0000
PatternBatteryFull=40;4;0;9d80407f0000

# Patterns only for use by combination rules
PatternCommunicationAndBatteryFull=29;1;0;9d8040ff05ff04ff05ff04ff42bf0000

# A combination-rule describes pattern transformations
# Please prefix combination-rule names with Combination
# to avoid name space clashes
#
# The first entry is the name of the pattern that holds the combined
# pattern; the following entries are the pre-requisites
# If all pre-requisites are true, then the combination pattern
# is activated
#
# Note: Ensure that the combination pattern always has a higher priority
# than the highest priority component
CombinationCommunicationAndBatteryFull=PatternCommunicationAndBatteryFull;PatternCommunication;PatternBatteryFull

# This example pattern has a priority of 42 (all patterns with a *lower*
# priority value will have precedence), and will flash
# This pattern will be visible even when the display is on.
PatternExample=42;1;30;9d80400044ff45ff0000


[LEDPatternNJoyRM696]

# Patterns used for the RM-696 hardware;
# this hardware has a single-colour LED connected to a NJoy controller
# Please prefix pattern names with Pattern to avoid name space clashes
#
# Priority (0 - highest, 255 - lowest)
# ScreenOn - 0 only show pattern when the display is off
#            1 show pattern even when the display is on
#            2 only show pattern when the display is off, including acting dead
#            3 show pattern even when the display is on, including acting dead
#            4 only show pattern if the display is off, or if in acting dead
#            5 always show pattern, even if LED disabled
# Timeout in seconds before pattern is disabled, 0 for infinite
# Pattern in NJoy format (16 commands at most)
#
# 0000 -- Jump to the start of the pattern for the channel
# 40xx -- Set channel brightness
# xxyy -- Increment/decrement
#      xx determines the speed;
#         01-3f -- short step time (granularity 0.49ms)
#         41-7f -- long step time (granularity 15.6ms)
#      yy determines the increment/decrement steps
#         00-7f -- increment steps 00 = 0 steps, 7f = 127 steps
#         80-ff -- decrement steps 80 = 0 steps, ff = 127 steps
#
#         Use 0 steps to create pauses
#         Two consecutive increment/decrement sequences are needed
#         to cover the entire range from 0-255
# c000 -- End pattern execution

# FIXME: sloooooow breathing
PatternDeviceSoftOff=253;0;0;4000413f41bf5f900000

PatternPowerOn=9;3;0;4000087f087f01ff01ffc000
PatternPowerOff=10;3;0;4000017f017f0dff0dffc000
PatternCommunication=30;1;0;4000027f027f02ff02ff027f027f02ff02ff41ff0000
PatternBatteryCharging=50;4;0;4000417f41ff41bf0000
PatternBatteryChargingFlat=50;4;0;407f5f005f005f005f00400041ff0000
PatternBatteryFull=40;4;0;407f0000

# Patterns only for use by combination rules
PatternCommunicationAndBatteryFull=29;1;0;40ff02ff02ff027f027f02ff02ff027f027f417f413f0000

# A combination-rule describes pattern transformations
# Please prefix combination-rule names with Combination
# to avoid name space clashes
#
# The first entry is the name of the pattern that holds the combined
# pattern; the following entries are the pre-requisites
# If all pre-requisites are true, then the combination pattern
# is activated
#
# Note: Ensure that the combination pattern always has a higher priority
# than the highest priority component
CombinationCommunicationAndBatteryFull=PatternCommunicationAndBatteryFull;PatternCommunication;PatternBatteryFull

# This example pattern has a priority of 42 (all patterns with a *lower*
# priority value will have precedence), and will flash
# This pattern will be visible even when the display is on.
PatternExample=42;1;30;4000427f427f42ff42ff0000
